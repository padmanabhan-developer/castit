<?phprequire '../libs/Slim/Slim.php';require_once 'dbHelper.php';require_once 'SimpleImage.php';require '../../vendor/autoload.php';use OpenCloud\Rackspace; use Mailgun\Mailgun; // Get Slim instance\Slim\Slim::registerAutoloader();$app = new \Slim\Slim();$app = \Slim\Slim::getInstance();if (version_compare(PHP_VERSION, '5.4.0', '<')) {        if(session_id() == '') {session_start();}    } else  {       if (session_status() == PHP_SESSION_NONE) {session_start();}    }// call our own dbHelper class$db = new dbHelper();$mgClient = new Mailgun('key-ebe8829c00330a3be43c59dd67da5b73');$domain = "mail.castit.dk";$imageClass = new SimpleImage();$app->post('/',function () use ($app) { 	global $db;	global $mgClient;	global $domain;});/*****************************************Purpose: Home pageParameter : NILType : POST******************************************/$app->post('/index',function () use ($app) {     global $db;		$data =  json_decode($app->request->getBody(), true);		$response = array();	    $rows = $db->select("ad_user","password, usertype", array('username' => $username), "");			if(count($rows['data'])>0) {		if($rows['data'][0]['password'] == md5($password)) {			$response = array('success' => true, 'usertype' => $rows['data'][0]['usertype'] );		}		else {			$response = array('success' => false, 'message' => 'Username or password is incorrect');		}	}	else {		$response['success'] = false;		$response['message'] = 'Username or password is incorrect';	}		echoResponse(200, $response);});/******************************************Purpose: Home page Landing pageParameter : NILType : POST******************************************/$app->get('/getprofiles',function () use ($app) {   global $db;  $conditional_profiles = array(	  0 => "AND ( m.profile_number LIKE 'C%') ",	  1 => "AND ( m.profile_number LIKE 'Y%') ",  );	$offset = (isset($_GET['offset'])) ? $_GET['offset'] : 0;	if(!isset($conditional_profiles[$offset])){		$conditional_profiles[$offset] = "";	}//   $conditional_profiles = "AND ( m.profile_number LIKE 'C%' OR m.profile_number LIKE 'A%'OR m.profile_number LIKE 'J%' OR m.profile_number LIKE 'Y%' ) ";  $sql = "SELECT   p.*, m.profile_group_id, m.profile_number, m.profile_number_first_name_last_name, m.version, m.current, g.name   as gender_name, hc.name   as hair_color_name, ec.name   as eye_color_name FROM profiles p   INNER JOIN (select * from memberships where current = 1) m ON m.profile_id = p.id   INNER JOIN genders g ON g.id = p.gender_id   INNER JOIN hair_colors hc ON hc.id = p.hair_color_id   INNER JOIN eye_colors ec ON ec.id = p.eye_color_id  WHERE ( p.profile_status_id = '1') AND m.current ='1' AND p.id IN ( SELECT profile_id from photos WHERE published ='1' and media_slet_status != '1' GROUP by profile_id ) ";// $offset = $offset * 500;// $limit  = " LIMIT 500 OFFSET ". $offset;// $sql = $sql . " ORDER BY RAND() " . $limit;// $sql = $sql . " ORDER BY RAND() limit 2";if($_SERVER['HTTP_HOST'] == 'castit.local'){	$sql = $sql . " ORDER BY m.profile_number ASC";}else{	// $sql = $sql . " ORDER BY RAND() ";	$sql = $sql . " ORDER BY m.profile_number ASC";}// $sql = $sql . " ORDER BY m.profile_group_id " . $limit;	  	if(isset($_GET['group_id']) && is_numeric($_GET['group_id']) && $_GET['group_id']>0){		unset($_SESSION['all_profiles']);		unset($_SESSION['c_profiles']);		unset($_SESSION['y_profiles']);		$group_id = $_GET['group_id'];		$group_profiles_query = $db->prepare("SELECT distinct(profile_id), profile_notes from profile_grouping where group_id = $group_id");		$group_profiles_query->execute();		$group_profiles_rows = $group_profiles_query->fetchAll(PDO::FETCH_ASSOC);          	$ids_in_group = array();		foreach($group_profiles_rows as $gp_row){			$ids_in_group[] = $gp_row['profile_id'];    	}    // var_dump($ids_in_group);    	$ids_in_group_sql = " (" . implode(",",$ids_in_group) . ") ";    // var_export($ids_in_group_sql);		$grouping_query = $db->prepare("SELECT * from grouping where group_id = $group_id");		$grouping_query->execute();		$grouping_rows = $grouping_query->fetchAll(PDO::FETCH_ASSOC);		$sql = "SELECT 			p.*, m.profile_group_id, m.profile_number, m.profile_number_first_name_last_name, m.version, m.current, g.name 			as gender_name			FROM profiles p 			INNER JOIN       		(select * from memberships where current = 1) m ON m.profile_id = p.id 			INNER JOIN genders g ON g.id = p.gender_id  			WHERE ( p.profile_status_id = '1' ) 					AND p.id IN $ids_in_group_sql";						$query = $db->prepare($sql); 			// echo $sql;exit;			// echo $query;exit;			$query->execute();			$rows_group = $query->fetchAll(PDO::FETCH_ASSOC);				// echo '<pre>';			// print_r($rows_group);			// exit;	}	if(!isset($_GET['group_id']) && !isset($_SESSION['c_profiles'])){		$query = $db->prepare($sql); 		$query->execute();		$rows = $query->fetchAll(PDO::FETCH_ASSOC);		$_SESSION['all_profiles'] = $rows;	}else{		if(isset($_SESSION['all_profiles'] ) && !isset($_GET['group_id'])){			$rows = $_SESSION['all_profiles'];		}		if(isset($_GET['group_id']) && is_numeric($_GET['group_id']) && $_GET['group_id']>0){			$rows = $rows_group;		}	}	// echo 'sdsds';die;	// print_r($rows[0]);exit;	$profiles = array();	$c_profiles = array();	$y_profiles = array();	// unset($_SESSION['c_profiles']);	if(count($rows)>0 && !isset($_GET['group_id']) && !isset($_SESSION['c_profiles'])) {		foreach($rows as $item){			$current_prefix = substr($item['profile_number'], 0, 1);			if($current_prefix == "C"){				$c_profiles[]=$item;			}			if($current_prefix == "Y"){				$y_profiles[]=$item;			}		}		shuffle($c_profiles);		shuffle($y_profiles);		$_SESSION['c_profiles'] = $c_profiles;		$_SESSION['y_profiles'] = $y_profiles;	}	if(count($rows)>0) {		if(isset($_SESSION['c_profiles'])){			$rows_temp = array_merge($_SESSION['c_profiles'], $_SESSION['y_profiles']);			$rows_new = array_slice($rows_temp, $offset*180, 180, true);		}else{			$rows_new = $rows;		}					// echo '<pre>';			// print_r($rows_new);			// exit;		foreach($rows_new as $row){			$birthdate = new DateTime($row['birthday']);        	$today   = new DateTime('today');        	$age = $birthdate->diff($today)->y;			// Profile Image			$profile_image ='';			$query_image = $db->prepare("SELECT *, DATE_FORMAT(created_at, '%Y') as create_year, DATE_FORMAT(created_at, '%m') as create_month, DATE_FORMAT(created_at, '%d') as create_date FROM photos WHERE profile_id = '".$row['id']."' and published ='1' and media_slet_status != '1' ORDER BY position ASC limit 1"); 		$query_image->execute();		$image= '';    	$rows_image = $query_image->fetchAll(PDO::FETCH_ASSOC);		if(count($rows_image) > 0){			// $path = $rows_image[0]['create_year']."/".$rows_image[0]['create_month']."/".$rows_image[0]['create_date']."/".$rows_image[0]['id']."/big_";			// $profile_image = 'https://castit.dk/profile_images/'.$path.$rows_image[0]['image'];			//$profile_image = 'http://castit.dk/assets/profile_images/'.$path.$rows_image[0]['image'];						$min = 0;			$rows_count = count($rows_image);			$max = $rows_count - 1;			$random_index = rand($min, $max);			$random_index = 0;			if (strpos($rows_image[$random_index]['path'], 'vhost') !== false) {				$path = $rows_image[$random_index]['path'];				$profile_image = 'https://castit.dk/images/uploads/'.$rows_image[$random_index]['image'];			}			else{				$path = $rows_image[$random_index]['create_year']."/".$rows_image[$random_index]['create_month']."/".$rows_image[$random_index]['create_date']."/".$rows_image[$random_index]['id']."/big_";				$profile_image = 'https://castit.dk/profile_images/'.$path.$rows_image[$random_index]['image'];			}		}			$profiles[] = array('id' 			=> $row['id'],								'bureau' 		=> $row['bureau'],								'nationality' 	=> $row['nationality'],								'name' 			=> $row['first_name'],								'first_name' 	=> $row['first_name'],								'last_name' 	=> $row['last_name'],								'profile_number' 	=> $row['profile_number'],								'profile_image' 	=> $profile_image,								'gender_id' 	=> $row['gender_id'],								'gender_name' 	=> $row['gender_name'],								'age' 			=> $age,								'height' 		=> $row['height'],								'weight' 		=> $row['weight'],								'address' 		=> $row['address'],								'zipcode' 		=> $row['zipcode'],								'city' 			=> $row['city'],								'phone' 		=> $row['phone'],								'cellphone' 	=> $row['cellphone'],								'email' 		=> $row['email'],								'job' 			=> $row['job'],								'marked_as_new'	=> $row['marked_as_new'],							);    }    $group_token = (isset($grouping_rows[0]['token_id'])) ? $grouping_rows[0]['token_id'] : array();    $response = array('success' => true, 'profiles' => $profiles, 'group_token' => $group_token);	}		else {		$response['success'] = false;		$response['message'] = 'Unbale to load Profiles list';	}		echoResponse(200, $response);});/******************************************Purpose: Home page Landing page Filter profilesParameter : NILType : POST******************************************/$app->get('/getfilterprofiles',function () use ($app) {     global $db;		$data = $app->request->get();	//print_r($data);	$search_text = ($data['search_text']) ? $data['search_text'] : '';	$age_from = ($data['age_from']) ? $data['age_from'] : '';	$age_to = ($data['age_to']) ? $data['age_to'] : '';	$genderval = ($data['genderval']) ? $data['genderval'] : '';		$date_debut = date("Y-m-d");		$search_qry = '';		if($age_from){		$date1 = strtotime($date_debut); 		$time1 = $age_from*31556926; 		$dob1 = $date1 - $time1;		$year_from = date("Y-m-d",$dob1);  		$search_qry .= " AND p.birthday <= '".$year_from."'";	}	if($age_to){		$date2 = strtotime($date_debut); 		$time2 = $age_to*31556926 + (31556926); 		$dob2 = $date2 - $time2;		$year_to = date("Y-m-d",$dob2); 		$search_qry .= " AND p.birthday >= '".$year_to."'";	}	if($genderval){		$search_qry .= " AND p.gender_id = '".$genderval."'";			}	if($search_text){		$search_qry .= " AND (p.first_name = '".$search_text."' 		OR m.profile_number = '".$search_text."'		OR m.profile_number like '%".$search_text."%')";			}		$qry = "SELECT p.*, m.profile_group_id, m.profile_number, m.profile_number_first_name_last_name, m.version, m.current, g.name as gender_name FROM profiles p INNER JOIN memberships m ON m.profile_id = p.id INNER JOIN genders g ON g.id = p.gender_id  WHERE (p.profile_status_id = '1' ) AND m.current ='1' AND p.id IN (SELECT profile_id from photos WHERE published ='1' and media_slet_status != '1' GROUP by profile_id) ".$search_qry."  ORDER by case WHEN m.profile_number LIKE 'C%' THEN 1 WHEN m.profile_number LIKE 'Y%' THEN 2 ELSE 3 END ";  $offset = (isset($_GET['offset'])) ? $_GET['offset'] : 1;  	$offset = $offset * 100;	$limit  = " LIMIT 100 OFFSET ". $offset;	$qry = $qry . $limit;	$sql_check_qry = "SELECT p.*, m.profile_group_id, m.profile_number, m.profile_number_first_name_last_name, m.version, m.current, g.name as gender_name FROM profiles p INNER JOIN memberships m ON m.profile_id = p.id INNER JOIN genders g ON g.id = p.gender_id  WHERE (p.profile_status_id = '1' ) AND m.current ='1' AND p.id IN (SELECT profile_id from photos WHERE published ='1' and media_slet_status != '1' GROUP by profile_id) AND m.profile_number = '" . $search_text . "'";	$sql_check = $db->prepare($sql_check_qry);	$sql_check->execute();	$result_set = $sql_check->fetchAll(PDO::FETCH_ASSOC);	// echo '<pre>';var_dump($result_set);exit;	if(count($result_set)>0){		$qry = $sql_check_qry;	}	$query = $db->prepare($qry); 	$query->execute();    $rows = $query->fetchAll(PDO::FETCH_ASSOC);    //echo 'sdsds';die;//	print_r($rows[0]);exit;    $profiles = array();	if(count($rows)>0) {		foreach($rows as $row){			$birthdate = new DateTime($row['birthday']);        	$today   = new DateTime('today');        	$age = $birthdate->diff($today)->y;			// Profile Image			$profile_image ='';			$query_image = $db->prepare("SELECT *, DATE_FORMAT(created_at, '%Y') as create_year, DATE_FORMAT(created_at, '%m') as create_month, DATE_FORMAT(created_at, '%d') as create_date FROM photos WHERE profile_id = '".$row['id']."' and published ='1' and media_slet_status != '1' ORDER BY position ASC LIMIT 1"); 	$query_image->execute();	$image= '';    $rows_image = $query_image->fetchAll(PDO::FETCH_ASSOC);    $rows_count = count($rows_image); 	if($rows_count > 0){		$min = 0;		$max = $rows_count - 1;		$random_index = rand($min, $max);		$random_index = 0;		if (strpos($rows_image[$random_index]['path'], 'vhost') !== false) {			$path = $rows_image[$random_index]['path'];			$profile_image = 'https://castit.dk/images/uploads/'.$rows_image[$random_index]['image'];		}		else{			$path = $rows_image[$random_index]['create_year']."/".$rows_image[$random_index]['create_month']."/".$rows_image[$random_index]['create_date']."/".$rows_image[$random_index]['id']."/big_";			$profile_image = 'https://castit.dk/profile_images/'.$path.$rows_image[$random_index]['image'];		}				}		$name = $row['first_name'];	if($search_text){		  if (mb_stristr($row['last_name'], $search_text, true)) {			$name = $row['last_name'];		}		else{			$name = $row['first_name'];		}	}			$profiles[] = array('id' 			=> $row['id'],								'bureau' 		=> $row['bureau'],								'nationality' 	=> $row['nationality'],								'name' 			=> $name,								'first_name' 	=> $row['first_name'],								'last_name' 	=> $row['last_name'],								'profile_number' 	=> $row['profile_number'],								'profile_image' 	=> $profile_image,								'gender_id' 	=> $row['gender_id'],								'gender_name' 	=> $row['gender_name'],								'age' 			=> $age,								'height' 		=> $row['height'],								'weight' 		=> $row['weight'],								'address' 		=> $row['address'],								'zipcode' 		=> $row['zipcode'],								'city' 			=> $row['city'],								'phone' 		=> $row['phone'],								'cellphone' 	=> $row['cellphone'],								'email' 		=> $row['email'],								'job' 			=> $row['job'],								'marked_as_new'	=> $row['marked_as_new'],							);		}		$response = array('success' => true, 'profiles' => $profiles );	}		else {		$response['success'] = false;		$response['message'] = 'Unbale to load Profiles list';	}		echoResponse(200, $response);});/******************************************Purpose: Home page Landing pageParameter : NILType : POST******************************************/$app->get('/getsingleprofiles',function () use ($app) {     global $db;	$profileid = $app->request->get('profileid');	$current_language = $app->request->get('lang');	if($profileid)	// $query = $db->prepare("SELECT p.*, m.profile_group_id, m.profile_number, m.profile_number_first_name_last_name, m.version, m.current, g.name as gender_name FROM profiles p INNER JOIN memberships m ON m.profile_id = p.id INNER JOIN genders g ON g.id = p.gender_id  WHERE p.id='".$profileid."' AND (p.profile_status_id = '1' OR  p.profile_status_id = '2') AND m.current ='1' LIMIT 1"); 	$query = $db->prepare("SELECT p.*, m.profile_group_id, m.profile_number, m.profile_number_first_name_last_name, m.version, m.current, g.name as gender_name FROM profiles p INNER JOIN memberships m ON m.profile_id = p.id INNER JOIN genders g ON g.id = p.gender_id  WHERE p.id='".$profileid."' AND (p.profile_status_id = '1' OR  p.profile_status_id = '2') AND m.current ='1' LIMIT 1"); 	$query->execute();		$rows = $query->fetchAll(PDO::FETCH_ASSOC);		// INNER JOIN hair_colors hc ON hc.id = p.hair_color_id INNER JOIN eye_colors ec ON ec.id = p.eye_color_id 		// , hc.name as hair_color_name, ec.name as eye_color_name    //echo 'sdsds';die;//	print_r($rows[0]);exit;    $profile_data = array();	if(count($rows)>0) {		$row = $rows[0];		$birthdate = new DateTime($row['birthday']);		$today   = new DateTime('today');		$age = $birthdate->diff($today)->y;		$hair_eye_color_query = $db->prepare("SELECT hc.name as hair_color_name, ec.name as eye_color_name from profiles p INNER JOIN hair_colors hc ON hc.id = p.hair_color_id INNER JOIN eye_colors ec ON ec.id = p.eye_color_id where p.id = '".$profileid."' ");		$hair_eye_color_query->execute();		$hair_eye_colors = $hair_eye_color_query->fetchAll(PDO::FETCH_ASSOC);		$row['eye_color_name'] = isset($hair_eye_colors[0]['eye_color_name']) ? $hair_eye_colors[0]['eye_color_name'] : " - ";		$row['hair_color_name'] = isset($hair_eye_colors[0]['hair_color_name']) ? $hair_eye_colors[0]['hair_color_name'] : " - ";		// Profile Image		$profile_images = array();		$query_image = $db->prepare("SELECT *, DATE_FORMAT(created_at, '%Y') as create_year, DATE_FORMAT(created_at, '%m') as create_month, DATE_FORMAT(created_at, '%d') as create_date FROM photos WHERE profile_id = '".$row['id']."' and published ='1' and media_slet_status != '1' ORDER BY position ASC"); 		$query_image->execute();		$image= '';		$rows_image = $query_image->fetchAll(PDO::FETCH_ASSOC);		$imgc = 1;		if(count($rows_image) > 0){			foreach($rows_image as $row_image){				if (strpos($row_image['path'], 'vhost') !== false) {					$fullpath = 'https://castit.dk/images/uploads/'.$row_image['image'];				}				else{					$path = $row_image['create_year']."/".$row_image['create_month']."/".$row_image['create_date']."/".$row_image['id']."/big_";					$fullpath = 'https://castit.dk/profile_images/'.$path.$row_image['image'];				}								$profile_images[] = array('imgcnt' => $imgc, 'urloriginal' =>$row_image['image'], 'fullpath'=>$fullpath);								$imgc++;			}		}				// Profile Videos		$profile_videos = array();		$query_video = $db->prepare("SELECT * FROM videos WHERE profile_id = '".$row['id']."' and published ='1' and media_slet_status != '1' ORDER BY position ASC"); 		$query_video->execute();		$video= '';		$rows_video = $query_video->fetchAll(PDO::FETCH_ASSOC);		$videoc = 1;		if(count($rows_video) > 0){			foreach($rows_video as $row_video){				/*				if (strpos($row_video['path'], 'vhost') !== false) {					$vpath = 'https://castit.dk/images/uploads/'.$row_video['filename'];					$thumbpath = 'https://castit.dk/images/uploads/'.$row_video['filename'];				}				else{					$vpath = 'http://assets3.castit.dk'.$row_video['path']."/".$row_video['filename'];					$thumbpath = 'http://assets3.castit.dk'.$row_video['thumbnail_photo_path']."/".$row_video['thumbnail_photo_filename'];				} */				$vpath = 'http://assets3.castit.dk'.$row_video['path']."/".$row_video['filename'];					$thumbpath = 'http://assets3.castit.dk'.$row_video['thumbnail_photo_path']."/".$row_video['thumbnail_photo_filename'];				$profile_videos[] = array('vidcnt' => $videoc, 'urloriginal' =>$vpath, 'img_thum'=>$thumbpath, 'fullpath'=>$vpath);				$videoc++;			}		}		$skills= '-';		$query_skills = $db->prepare("SELECT s.name FROM skills s JOIN profiles_skills ps ON ps.skill_id = s.id WHERE ps.profile_id = '".$row['id']."'"); 		if($current_language == 'en'){			$query_skills = $db->prepare("SELECT s.name_en as name FROM skills s JOIN profiles_skills ps ON ps.skill_id = s.id WHERE ps.profile_id = '".$row['id']."'"); 		}				$query_skills->execute();		$rows_skills = $query_skills->fetchAll(PDO::FETCH_ASSOC);		if(count($rows_skills) > 0){			foreach($rows_skills as $rows_skill){				$skillsa[] = $rows_skill['name'];			}			$skills=  implode(". ",$skillsa);		}		$categories= '-';		$query_exp = $db->prepare("SELECT c.name FROM categories c JOIN categories_profiles cp ON cp.category_id = c.id WHERE cp.profile_id = '".$row['id']."'"); 				if($current_language == 'en'){			$query_exp = $db->prepare("SELECT c.name_en as name FROM categories c JOIN categories_profiles cp ON cp.category_id = c.id WHERE cp.profile_id = '".$row['id']."'"); 					}				$query_exp->execute();		$rows_exp = $query_exp->fetchAll(PDO::FETCH_ASSOC);		if(count($rows_exp) > 0){			$expa=array();			foreach($rows_exp as $row_exp){				if(!in_array($row_exp['name'], $expa)){					$expa[] = $row_exp['name'];				}			}			$categories=  implode(", ",$expa);		}		$licenses="-";				$query_licenses= $db->prepare("SELECT l.name FROM drivers_licenses l JOIN drivers_licenses_profiles lp ON lp.drivers_license_id = l.id WHERE lp.profile_id = '".$row['id']."'"); 			if($current_language == 'en'){			$query_licenses= $db->prepare("SELECT l.name_en as name FROM drivers_licenses l JOIN drivers_licenses_profiles lp ON lp.drivers_license_id = l.id WHERE lp.profile_id = '".$row['id']."'"); 		}				$query_licenses->execute();		$rows_licenses = $query_licenses->fetchAll(PDO::FETCH_ASSOC);		if(count($rows_licenses) > 0){			$lic=array();			foreach($rows_licenses as $rows_license){				$lic[] = $rows_license['name'];			}			$licenses=  implode(", ",$lic);		}		$lang= array();		//echo $row['id'];				$query_lang = $db->prepare("SELECT lp.*, lpl.name FROM language_proficiencies lp, language_proficiency_languages lpl WHERE lpl.id = lp.language_proficiency_language_id AND lp.profile_id = '".$row['id']."' ORDER BY lp.id"); 				if($current_language == 'en'){			$query_lang = $db->prepare("SELECT lp.*, lpl.name_en as name FROM language_proficiencies lp, language_proficiency_languages lpl WHERE lpl.id = lp.language_proficiency_language_id AND lp.profile_id = '".$row['id']."' ORDER BY lp.id"); 		}				$query_lang->execute();		$rows_langs = $query_lang->fetchAll(PDO::FETCH_ASSOC);		if(count($rows_langs) > 0){			foreach($rows_langs as $rows_lang){				$langstar = array();				for($lc = 1; $lc <= 4;$lc++){					$langstar[] = array('star'=>($lc <= $rows_lang['language_proficiency_rating_id']) ? 'star3.png': 'star4.png');				}								$lang[] = array('name' => $rows_lang['name'], 'rating' => $rows_lang['language_proficiency_rating_id'], 'langstar'=>$langstar);							}		}		//print_r($lang);		//die;			$shoes = ($row['shoe_size_from']) ? $row['shoe_size_from'] : '';			$shoes = ($row['shoe_size_to']) ? $shoes. " - ".$row['shoe_size_to'] : $shoes;			$shirt = ($row['shirt_size_from']) ? $row['shirt_size_from'] : '';			$shirt = ($row['shirt_size_to']) ? $shirt. " - ".$row['shirt_size_to'] : $shirt;			$pants = ($row['pants_size_from']) ? $row['pants_size_from'] : '';			$pants = ($row['pants_size_to']) ? $pants. " - ".$row['pants_size_to'] : $pants;			$bra = ($row['bra_size']) ? $row['bra_size'] : '';			$children = ($row['children_sizes']) ? $row['children_sizes'] : '';			$profile_data = array('id' 			=> $row['id'],								'bureau' 		=> $row['bureau'],								'nationality' 	=> $row['nationality'],								'name' 			=> $row['first_name'],								'first_name' 	=> $row['first_name'],								'last_name' 	=> $row['last_name'],								'profile_number' 	=> $row['profile_number'],								'profile_image' 	=> $profile_images,								'gender_id' 	=> $row['gender_id'],								'gender_name' 	=> $row['gender_name'],								'age' 			=> $age,								'height' 		=> $row['height'],								'weight' 		=> $row['weight'],								'hair_color_name' 	=> isset($row['hair_color_name']) ? $row['hair_color_name'] : " - ",								'eye_color_name' 	=> isset($row['eye_color_name']) ? $row['eye_color_name'] : " - ",								'shoes' 		=> ($shoes != '') ? $shoes : ' - ' ,								'shirt' 		=> ($shirt != '') ? $shirt : ' - ',								'pants' 		=> ($pants != '') ? $pants : ' - ',								'bra' 			=> ($bra != '') ? $bra : ' - ',								'children' 		=> ($children != '') ? $children : ' - ',								/*'address' 		=> $row['address'],								'zipcode' 		=> $row['zipcode'],								'city' 			=> $row['city'],								'phone' 		=> $row['phone'],								'cellphone' 	=> $row['cellphone'],								'email' 		=> $row['email'],*/								'experience' 			=> ($row['job'] != '') ? $row['job'] : ' - ',								'sports_hobby'			=> ($row['sports_hobby']) ? $row['sports_hobby'] : ' - '							);				$response = array('success' => true, 'profile' => $profile_data, 'profile_images' => $profile_images, 'profile_videos' => $profile_videos, 'skills' => $skills, 'categories' => $categories, 'licenses'=>$licenses, 'lang' => $lang );		}		else {		$response['success'] = false;		$response['message'] = 'Unbale to load Profiles list';	}	//print_r($response);die;		echoResponse(200, $response);});/** */$app->post('/updategroupdata', function () use ($app) {  global $db;  $params = $app->request;  $allPostVars = $app->request->post();  ppe($allPostVars);	});/******************************************Purpose: Update in to lightbox profiles listParameter : profile idType : GET******************************************/$app->get('/updatelightboxprofiles', function () use ($app) {     global $db;	$profileid =  $app->request->get('profileid');	$lb_pprofiles = array();	$reponse = array();	$rowcount = 0;	$profile_note =  $app->request->get('profile_notes');	$profile_grouping =  $app->request->get('selectedgroupings');	$grouptoken =  $app->request->get('grouptoken');	if(isset($_SESSION["lightbox_token"])){		$lightbox_token = $_SESSION["lightbox_token"];	}else{		$lightbox_token = generate_uuid();		$_SESSION["lightbox_token"] = $lightbox_token;	}			$query_check_lb = $db->prepare("SELECT * FROM lightboxes where token = '".$lightbox_token."'"); 	$query_check_lb->execute();	$rows_lb = $query_check_lb->fetchAll(PDO::FETCH_ASSOC);	if(count($rows_lb)>0) {		$lbid = $rows_lb[0]['id'];	}else{			$q_lightbox = "INSERT INTO `lightboxes` ( `token`) VALUES ('".$lightbox_token."')"; 			//echo $q; 			$lbid = $db->exec($q_lightbox);	}		$rows_check = $db->select("lightboxes_profiles","lightbox_id, profile_id", array('lightbox_id' => $lbid, 'profile_id' => $profileid), "");			if(count($rows_check['data'])>0) {		// nothing update when profile ID already existing	}else{		// insert the profile ID in to lighbox list		$q_insert_profile = "INSERT INTO `lightboxes_profiles` ( `lightbox_id`, `profile_id`) VALUES ('".$lbid."', '".$profileid."')"; 		//echo $q; 		$query_insert_profile = $db->prepare($q_insert_profile);		$query_insert_profile->execute();	}	$_SESSION["lb_notes"][$profileid] = ($profile_note) ? $profile_note : '';		if($profile_grouping){		$selectedgroupings = explode(',',$profile_grouping);				foreach($selectedgroupings as $key => $gidval){			$query_check_gp = $db->prepare("SELECT * FROM profile_grouping where profile_id = '".$profileid."' AND group_id = '".$gidval."' "); 			$query_check_gp->execute();			$rows_gp = $query_check_gp->fetchAll(PDO::FETCH_ASSOC);			if(count($rows_gp)>0) {				// echo 'ssposdpofsdf';			}else{				$q_insert_profilegp = "INSERT INTO `profile_grouping` ( `profile_id`, `group_id`, `profile_notes`) VALUES ('".$profileid."', '".$gidval."', '".$profile_note."')"; 				//echo $q; 				$query_insert_profilegp = $db->prepare($q_insert_profilegp);				$query_insert_profilegp->execute();			}		}	}					$query_lb_pprofiles = $db->prepare("SELECT * FROM lightboxes_profiles WHERE lightbox_id ='".$lbid."'"); 			$query_lb_pprofiles->execute();			$rows_lb_pprofiles = $query_lb_pprofiles->fetchAll(PDO::FETCH_ASSOC);			$rowcount = count($rows_lb_pprofiles);			if($rowcount > 0){				foreach($rows_lb_pprofiles as $rowp) {					//$lb_pprofiles[] = array('id' => $rowp['profile_id']);											$query = $db->prepare("SELECT p.*, m.profile_group_id, m.profile_number, m.profile_number_first_name_last_name, m.version, m.current, g.name as gender_name, hc.name as hair_color_name, ec.name as eye_color_name FROM profiles p INNER JOIN memberships m ON m.profile_id = p.id INNER JOIN genders g ON g.id = p.gender_id INNER JOIN hair_colors hc ON hc.id = p.hair_color_id INNER JOIN eye_colors ec ON ec.id = p.eye_color_id  WHERE p.id='".$rowp['profile_id']."' AND (p.profile_status_id = '1' ) AND m.current ='1' LIMIT 1"); 						$query->execute();						$rows = $query->fetchAll(PDO::FETCH_ASSOC);						//echo 'sdsds';die;					//	print_r($rows[0]);exit;						if(count($rows)>0) {							$row = $rows[0];								$birthdate = new DateTime($row['birthday']);								$today   = new DateTime('today');								$age = $birthdate->diff($today)->y;													// Profile Image								$profile_image ='';								$query_image = $db->prepare("SELECT *, DATE_FORMAT(created_at, '%Y') as create_year, DATE_FORMAT(created_at, '%m') as create_month, DATE_FORMAT(created_at, '%d') as create_date FROM photos WHERE profile_id = '".$row['id']."' and published ='1' and media_slet_status != '1' ORDER BY position ASC LIMIT 1"); 						$query_image->execute();						$image= '';						$rows_image = $query_image->fetchAll(PDO::FETCH_ASSOC);						if(count($rows_image) > 0){							if (strpos($rows_image[0]['path'], 'vhost') !== false) {								$profile_image = 'https://castit.dk/images/uploads/'.$rows_image[0]['image'];							}							else{								$path = $rows_image[0]['create_year']."/".$rows_image[0]['create_month']."/".$rows_image[0]['create_date']."/".$rows_image[0]['id']."/thumb_";								$profile_image = 'https://castit.dk/profile_images/'.$path.$rows_image[0]['image'];							}														}								$lb_note = isset($_SESSION["lb_notes"][$row['id']]) ? $_SESSION["lb_notes"][$row['id']]: '' ;								$groupnamear = array();															$lb_group_qry = "SELECT pg.*, g.group_name from profile_grouping pg JOIN grouping g ON pg.group_id = g.group_id AND g.token_id = '".$grouptoken."' WHERE pg.profile_id='".$row['id']."'";																$query_group = $db->prepare($lb_group_qry);								$query_group->execute();								$rows_group = $query_group->fetchAll(PDO::FETCH_ASSOC);								if(count($rows_group) > 0){									foreach($rows_group as $rowgp) {										$groupnamear[] = 	$rowgp['group_name'];									}									$groupname = implode(",",$groupnamear);								}								else{									$groupname = '-';								}													$lb_pprofiles[] = array('id' 			=> $row['id'],													'bureau' 		=> $row['bureau'],													'nationality' 	=> $row['nationality'],													'name' 			=> $row['first_name'],													'first_name' 	=> $row['first_name'],													'last_name' 	=> $row['last_name'],													'profile_number' 	=> $row['profile_number'],													'profile_image' 	=> $profile_image,													'gender_id' 	=> $row['gender_id'],													'gender_name' 	=> $row['gender_name'],													'age' 			=> $age,													'height' 		=> $row['height'],													'weight' 		=> $row['weight'],													/*'address' 		=> $row['address'],													'zipcode' 		=> $row['zipcode'],													'city' 			=> $row['city'],													'phone' 		=> $row['phone'],													'cellphone' 	=> $row['cellphone'],													'email' 		=> $row['email'], */													'job' 			=> $row['job'],													'lb_note' 			=> $lb_note,													'group_name' 	=> $groupname,																	);																				}									}			}		 			$reponse =  array('count'=> $rowcount, 'lbprofiles'=>$lb_pprofiles);			echoResponse(200, $reponse);  });/******************************************Purpose: Remove profile from lightbox profiles listParameter : profile idType : GET******************************************/$app->get('/removelightboxprofiles', function () use ($app) {     global $db;	$profileid =  $app->request->get('profileid');	$lb_pprofiles = array();	$reponse = array();	$rowcount = 0;	$grouptoken =  $app->request->get('grouptoken');	if(isset($_SESSION["lightbox_token"])){		$lightbox_token = $_SESSION["lightbox_token"];	}		if($lightbox_token){		$query_check_lb = $db->prepare("SELECT * FROM lightboxes where token = '".$lightbox_token."'"); 		$query_check_lb->execute();		$rows_lb = $query_check_lb->fetchAll(PDO::FETCH_ASSOC);		if(count($rows_lb)>0) {			$lbid = $rows_lb[0]['id'];			$q_del_profile = "DELETE FROM `lightboxes_profiles` WHERE `lightbox_id` = '".$lbid."' AND `profile_id` = '".$profileid."'"; 			//echo $q; 			$query_del_profile = $db->prepare($q_del_profile);			$query_del_profile->execute();		}	}			$query_lb_pprofiles = $db->prepare("SELECT * FROM lightboxes_profiles WHERE lightbox_id ='".$lbid."'"); 			$query_lb_pprofiles->execute();			$rows_lb_pprofiles = $query_lb_pprofiles->fetchAll(PDO::FETCH_ASSOC);			$rowcount = count($rows_lb_pprofiles);			if($rowcount > 0){				foreach($rows_lb_pprofiles as $rowp) {					//$lb_pprofiles[] = array('id' => $rowp['profile_id']);											$query = $db->prepare("SELECT p.*, m.profile_group_id, m.profile_number, m.profile_number_first_name_last_name, m.version, m.current, g.name as gender_name, hc.name as hair_color_name, ec.name as eye_color_name FROM profiles p INNER JOIN memberships m ON m.profile_id = p.id INNER JOIN genders g ON g.id = p.gender_id INNER JOIN hair_colors hc ON hc.id = p.hair_color_id INNER JOIN eye_colors ec ON ec.id = p.eye_color_id  WHERE p.id='".$rowp['profile_id']."' AND (p.profile_status_id = '1' ) AND m.current ='1' LIMIT 1"); 						$query->execute();						$rows = $query->fetchAll(PDO::FETCH_ASSOC);						//echo 'sdsds';die;					//	print_r($rows[0]);exit;						if(count($rows)>0) {							$row = $rows[0];								$birthdate = new DateTime($row['birthday']);								$today   = new DateTime('today');								$age = $birthdate->diff($today)->y;													// Profile Image								$profile_image ='';								$query_image = $db->prepare("SELECT *, DATE_FORMAT(created_at, '%Y') as create_year, DATE_FORMAT(created_at, '%m') as create_month, DATE_FORMAT(created_at, '%d') as create_date FROM photos WHERE profile_id = '".$row['id']."' and published ='1' and media_slet_status != '1' ORDER BY position ASC LIMIT 1"); 						$query_image->execute();						$image= '';						$rows_image = $query_image->fetchAll(PDO::FETCH_ASSOC);						if(count($rows_image) > 0){							if (strpos($rows_image[0]['path'], 'vhost') !== false) {								$profile_image = 'https://castit.dk/images/uploads/'.$rows_image[0]['image'];							}							else{								$path = $rows_image[0]['create_year']."/".$rows_image[0]['create_month']."/".$rows_image[0]['create_date']."/".$rows_image[0]['id']."/thumb_";								$profile_image = 'https://castit.dk/profile_images/'.$path.$rows_image[0]['image'];							}														}								$lb_note = isset($_SESSION["lb_notes"][$row['id']]) ? $_SESSION["lb_notes"][$row['id']]: '' ;								$groupnamear = array();								$lb_group_qry = "SELECT pg.*, g.group_name from profile_grouping pg JOIN grouping g ON pg.group_id = g.group_id  AND g.token_id = '".$grouptoken."' WHERE pg.profile_id='".$row['id']."'";									$query_group = $db->prepare($lb_group_qry);								$query_group->execute();								$rows_group = $query_group->fetchAll(PDO::FETCH_ASSOC);								if(count($rows_group) > 0){									foreach($rows_group as $rowgp) {										$groupnamear[] = 	$rowgp['group_name'];									}									$groupname = implode(",",$groupnamear);								}								else{									$groupname = '-';								}													$lb_pprofiles[] = array('id' 			=> $row['id'],													'bureau' 		=> $row['bureau'],													'nationality' 	=> $row['nationality'],													'name' 			=> $row['first_name'],													'first_name' 	=> $row['first_name'],													'last_name' 	=> $row['last_name'],													'profile_number' 	=> $row['profile_number'],													'profile_image' 	=> $profile_image,													'gender_id' 	=> $row['gender_id'],													'gender_name' 	=> $row['gender_name'],													'age' 			=> $age,													'height' 		=> $row['height'],													'weight' 		=> $row['weight'],													/*'address' 		=> $row['address'],													'zipcode' 		=> $row['zipcode'],													'city' 			=> $row['city'],													'phone' 		=> $row['phone'],													'cellphone' 	=> $row['cellphone'],													'email' 		=> $row['email'],*/													'job' 			=> $row['job'],													'lb_note' 			=> $lb_note,													'group_name' 	=> $groupname,												);																				}									}			}		 			$reponse =  array('count'=> $rowcount, 'lbprofiles'=>$lb_pprofiles);			echoResponse(200, $reponse);  });/******************************************Purpose: Get lightbox profiles listParameter : nullType : GET******************************************/$app->get('/getlightboxprofiles', function () use ($app) {     global $db;	$profileid =  $app->request->get('profileid');	$lb_pprofiles = array();	$reponse = array();	$rowcount = 0;	$grouptoken =  $app->request->get('grouptoken');	if(isset($_SESSION["lightbox_token"])){		$lightbox_token = $_SESSION["lightbox_token"];	}else{		$lightbox_token = generate_uuid();		$_SESSION["lightbox_token"] = $lightbox_token;	}			$query_check_lb = $db->prepare("SELECT * FROM lightboxes where token = '".$lightbox_token."'"); 	$query_check_lb->execute();	$rows_lb = $query_check_lb->fetchAll(PDO::FETCH_ASSOC);	if(count($rows_lb)>0) {		$lbid = $rows_lb[0]['id'];	}else{			$q_lightbox = "INSERT INTO `lightboxes` ( `token`) VALUES ('".$lightbox_token."')"; 			//echo $q; 			$lbid = $db->exec($q_lightbox);	}				$query_lb_pprofiles = $db->prepare("SELECT * FROM lightboxes_profiles WHERE lightbox_id ='".$lbid."'"); 	$query_lb_pprofiles->execute();	$rows_lb_pprofiles = $query_lb_pprofiles->fetchAll(PDO::FETCH_ASSOC);	$rowcount = count($rows_lb_pprofiles);	if($rowcount > 0){		foreach($rows_lb_pprofiles as $rowp) {							$query = $db->prepare("SELECT p.*, m.profile_group_id, m.profile_number, m.profile_number_first_name_last_name, m.version, m.current, g.name as gender_name, hc.name as hair_color_name, ec.name as eye_color_name FROM profiles p INNER JOIN memberships m ON m.profile_id = p.id INNER JOIN genders g ON g.id = p.gender_id INNER JOIN hair_colors hc ON hc.id = p.hair_color_id INNER JOIN eye_colors ec ON ec.id = p.eye_color_id  WHERE p.id='".$rowp['profile_id']."' AND (p.profile_status_id = '1' ) AND m.current ='1' LIMIT 1"); 				$query->execute();				$rows = $query->fetchAll(PDO::FETCH_ASSOC);				if(count($rows)>0) {					$row = $rows[0];						$birthdate = new DateTime($row['birthday']);						$today   = new DateTime('today');						$age = $birthdate->diff($today)->y;									// Profile Image						$profile_image ='';						$query_image = $db->prepare("SELECT *, DATE_FORMAT(created_at, '%Y') as create_year, DATE_FORMAT(created_at, '%m') as create_month, DATE_FORMAT(created_at, '%d') as create_date FROM photos WHERE profile_id = '".$row['id']."' and published ='1' and media_slet_status != '1' ORDER BY position ASC LIMIT 1"); 				$query_image->execute();				$image= '';				$rows_image = $query_image->fetchAll(PDO::FETCH_ASSOC);				if(count($rows_image) > 0){					if (strpos($rows_image[0]['path'], 'vhost') !== false) {						$profile_image = 'https://castit.dk/images/uploads/'.$rows_image[0]['image'];					}					else{						$path = $rows_image[0]['create_year']."/".$rows_image[0]['create_month']."/".$rows_image[0]['create_date']."/".$rows_image[0]['id']."/thumb_";						$profile_image = 'https://castit.dk/profile_images/'.$path.$rows_image[0]['image'];					}				}				$groupnamear = array();				$lb_group_qry = "SELECT pg.*, g.group_name from profile_grouping pg JOIN grouping g ON pg.group_id = g.group_id AND g.token_id = '".$grouptoken."' WHERE pg.profile_id='".$row['id']."'";					$query_group = $db->prepare($lb_group_qry);				$query_group->execute();				$rows_group = $query_group->fetchAll(PDO::FETCH_ASSOC);				if(count($rows_group) > 0){					foreach($rows_group as $rowgp) {						$groupnamear[] = 	$rowgp['group_name'];					}					$groupname = implode(",",$groupnamear);				}				else{					$groupname = '-';				}												$lb_note = isset($_SESSION["lb_notes"][$row['id']]) ? $_SESSION["lb_notes"][$row['id']]: '' ;				$lb_pprofiles[] = array('id' 			=> $row['id'],									'bureau' 		=> $row['bureau'],									'nationality' 	=> $row['nationality'],									'name' 			=> $row['first_name'],									'first_name' 	=> $row['first_name'],									'last_name' 	=> $row['last_name'],									'profile_number' 	=> $row['profile_number'],									'profile_image' 	=> $profile_image,									'gender_id' 	=> $row['gender_id'],									'gender_name' 	=> $row['gender_name'],									'age' 			=> $age,									'height' 		=> $row['height'],									'weight' 		=> $row['weight'],									/*'address' 		=> $row['address'],									'zipcode' 		=> $row['zipcode'],									'city' 			=> $row['city'],									'phone' 		=> $row['phone'],									'cellphone' 	=> $row['cellphone'],									'email' 		=> $row['email'],*/									'job' 			=> $row['job'],									'lb_note' 		=> $lb_note,									'group_name' 	=> $groupname,								);				}		}	}	$reponse =  array('count'=> $rowcount, 'lbprofiles'=>$lb_pprofiles);	echoResponse(200, $reponse);  });$app->post('/updatenotes', function() use ($app){	global $db;	$data = json_decode($app->request->getBody());	$sql = "UPDATE `profile_grouping` set `profile_notes` = '".$data->notes."' WHERE `group_id` = ".$data->group_id." AND `profile_id` = ".$data->profile_id;	$updatenotes_in_db = $db->prepare($sql);	$updatenotes_in_db->execute();});/******************************************Purpose: Get Grouping profiles listParameter : nullType : GET******************************************/$app->get('/getgroupingprofiles', function () use ($app) {     global $db;	$reponse = array();	$rowcount = 0;	$grouping_profile = array();	$grouptoken =  $app->request->get('grouptoken');  $sql = "SELECT *, date_format(added_on , '%d.%m.%Y') as addedon  FROM grouping where token_id= '".$grouptoken."' AND status = '1' order by group_name asc";  if(isset($_GET['grouptoken_groupid'])){    $gpid = (is_numeric($_GET['grouptoken_groupid'])) ? " AND group_id = ".$_GET['grouptoken_groupid'] : '';    $sql = "SELECT *, date_format(added_on , '%d.%m.%Y') as addedon  FROM grouping where token_id= '".$grouptoken."' AND status = '1' ". $gpid ." order by group_name asc";  }  $query_check_gb = $db->prepare($sql); 	$query_check_gb->execute();	$rows_gb = $query_check_gb->fetchAll(PDO::FETCH_ASSOC);	if(count($rows_gb)>0) {		$rowcount = count($rows_gb);		foreach($rows_gb as $rowgp){			$lb_pprofiles = array();			$gpid = 	$rowgp['group_id'];			$query_lb_pprofiles = $db->prepare("SELECT * FROM profile_grouping WHERE group_id ='".$gpid."'"); 			$query_lb_pprofiles->execute();			$rows_lb_pprofiles = $query_lb_pprofiles->fetchAll(PDO::FETCH_ASSOC);			$rowcountpg = count($rows_lb_pprofiles);			if($rowcountpg > 0){				foreach($rows_lb_pprofiles as $rowp) {						// $query = $db->prepare("SELECT p.*, m.profile_group_id, m.profile_number, m.profile_number_first_name_last_name, m.version, m.current, g.name as gender_name, hc.name as hair_color_name, ec.name as eye_color_name FROM profiles p INNER JOIN memberships m ON m.profile_id = p.id INNER JOIN genders g ON g.id = p.gender_id INNER JOIN hair_colors hc ON hc.id = p.hair_color_id INNER JOIN eye_colors ec ON ec.id = p.eye_color_id  WHERE p.id='".$rowp['profile_id']."' AND (p.profile_status_id = '1' ) AND m.current ='1' LIMIT 1"); 						$query = $db->prepare("SELECT p.*, m.profile_group_id, m.profile_number, m.profile_number_first_name_last_name, m.version, m.current, g.name as gender_name FROM profiles p INNER JOIN memberships m ON m.profile_id = p.id INNER JOIN genders g ON g.id = p.gender_id  WHERE p.id='".$rowp['profile_id']."' AND (p.profile_status_id = '1' ) AND m.current ='1' LIMIT 1"); 						$query->execute();						$rows = $query->fetchAll(PDO::FETCH_ASSOC);						if(count($rows)>0) {							$row = $rows[0];								$birthdate = new DateTime($row['birthday']);								$today   = new DateTime('today');								$age = $birthdate->diff($today)->y;													// Profile Image								$profile_image ='';								$query_image = $db->prepare("SELECT *, DATE_FORMAT(created_at, '%Y') as create_year, DATE_FORMAT(created_at, '%m') as create_month, DATE_FORMAT(created_at, '%d') as create_date FROM photos WHERE profile_id = '".$row['id']."' and published ='1' and media_slet_status != '1' ORDER BY position ASC LIMIT 1"); 						$query_image->execute();						$image= '';						$rows_image = $query_image->fetchAll(PDO::FETCH_ASSOC);						if(count($rows_image) > 0){							if (strpos($rows_image[0]['path'], 'vhost') !== false) {								$profile_image = 'https://castit.dk/images/uploads/'.$rows_image[0]['image'];							}							else{								$path = $rows_image[0]['create_year']."/".$rows_image[0]['create_month']."/".$rows_image[0]['create_date']."/".$rows_image[0]['id']."/thumb_";								$profile_image = 'https://castit.dk/profile_images/'.$path.$rows_image[0]['image'];							}													}						// $lb_note = isset($_SESSION["lb_notes"][$row['id']]) ? $_SESSION["lb_notes"][$row['id']]: '' ;						$lb_note = $rowp['profile_notes'];						$lb_pprofiles[] = array('id' 			=> $row['id'],											'bureau' 		=> $row['bureau'],											'nationality' 	=> $row['nationality'],											'name' 			=> $row['first_name'],											'first_name' 	=> $row['first_name'],											'last_name' 	=> $row['last_name'],											'profile_number' 	=> $row['profile_number'],											'profile_image' 	=> $profile_image,											'gender_id' 	=> $row['gender_id'],											'gender_name' 	=> $row['gender_name'],											'age' 			=> $age,											'height' 		=> $row['height'],											'weight' 		=> $row['weight'],											/*'address' 		=> $row['address'],											'zipcode' 		=> $row['zipcode'],											'city' 			=> $row['city'],											'phone' 		=> $row['phone'],											'cellphone' 	=> $row['cellphone'],											'email' 		=> $row['email'],*/											'job' 			=> $row['job'],											'lb_note' 			=> $lb_note,										);						}				}			}			$grouping_profile[] = array('group_id' => $rowgp['group_id'],										'group_name'=>$rowgp['group_name'],										'group_token'=>$rowgp['token_id'],										'addedon' => $rowgp['addedon'],										'group_profiles'=> $lb_pprofiles);		}	}	$reponse =  array('count'=> $rowcount, 'gpprofiles'=>$grouping_profile);	echoResponse(200, $reponse);  });$app->get('/removeProfileFromGroup', function () use ($app){    global $db;	$groupid =  $app->request->get('groupid');	$grouptoken =  $app->request->get('grouptoken');	$profile_id = $app->request->get('profileid');	if(($groupid > 0) && ($profile_id > 0)){		$query = $db->prepare("delete from profile_grouping where profile_id = " . $profile_id . " AND group_id = " . $groupid);		$query->execute();	}});/******************************************Purpose: Remove group from Grouping profiles listParameter : nullType : GET******************************************/$app->get('/removegroupfromgrouping', function () use ($app) {     global $db;	$groupid =  $app->request->get('groupid');	$grouptoken =  $app->request->get('grouptoken');	if($groupid){		$query_check_gb = $db->prepare("SELECT * FROM grouping where group_id = '".$groupid."' AND token_id = '".$grouptoken."'"); 		$query_check_gb->execute();		$rows_gb = $query_check_gb->fetchAll(PDO::FETCH_ASSOC);		if(count($rows_gb)>0) {			//$gbid = $rows_gb[0]['group_id'];			$q_del_gp = "DELETE FROM `grouping` WHERE `group_id` = '".$groupid."'"; 			$query_del_grp = $db->prepare($q_del_gp);			$query_del_grp->execute();			$q_del_gp1 = "DELETE FROM `profile_grouping` WHERE `group_id` = '".$groupid."'"; 			$query_del_grp1 = $db->prepare($q_del_gp1);			$query_del_grp1->execute();		}	}	$reponse = array();	$rowcount = 0;	$grouping_profile = array();	$query_check_gb = $db->prepare("SELECT *, date_format(added_on , '%d.%m.%Y') as addedon  FROM grouping where status = '1' AND token_id = '".$grouptoken."' order by group_name asc"); 	$query_check_gb->execute();	$rows_gb = $query_check_gb->fetchAll(PDO::FETCH_ASSOC);	if(count($rows_gb)>0) {		$rowcount = count($rows_gb);		foreach($rows_gb as $rowgp){			$lb_pprofiles = array();			$gpid = 	$rowgp['group_id'];			$query_lb_pprofiles = $db->prepare("SELECT * FROM profile_grouping WHERE group_id ='".$gpid."'"); 			$query_lb_pprofiles->execute();			$rows_lb_pprofiles = $query_lb_pprofiles->fetchAll(PDO::FETCH_ASSOC);			$rowcountpg = count($rows_lb_pprofiles);			if($rowcountpg > 0){				foreach($rows_lb_pprofiles as $rowp) {											$query = $db->prepare("SELECT p.*, m.profile_group_id, m.profile_number, m.profile_number_first_name_last_name, m.version, m.current, g.name as gender_name, hc.name as hair_color_name, ec.name as eye_color_name FROM profiles p INNER JOIN memberships m ON m.profile_id = p.id INNER JOIN genders g ON g.id = p.gender_id INNER JOIN hair_colors hc ON hc.id = p.hair_color_id INNER JOIN eye_colors ec ON ec.id = p.eye_color_id  WHERE p.id='".$rowp['profile_id']."' AND (p.profile_status_id = '1' ) AND m.current ='1' LIMIT 1"); 						$query->execute();						$rows = $query->fetchAll(PDO::FETCH_ASSOC);						if(count($rows)>0) {							$row = $rows[0];								$birthdate = new DateTime($row['birthday']);								$today   = new DateTime('today');								$age = $birthdate->diff($today)->y;													// Profile Image								$profile_image ='';								$query_image = $db->prepare("SELECT *, DATE_FORMAT(created_at, '%Y') as create_year, DATE_FORMAT(created_at, '%m') as create_month, DATE_FORMAT(created_at, '%d') as create_date FROM photos WHERE profile_id = '".$row['id']."' and published ='1' and media_slet_status != '1' ORDER BY position ASC LIMIT 1"); 						$query_image->execute();						$image= '';						$rows_image = $query_image->fetchAll(PDO::FETCH_ASSOC);						if(count($rows_image) > 0){							if (strpos($rows_image[0]['path'], 'vhost') !== false) {								$profile_image = 'https://castit.dk/images/uploads/'.$rows_image[0]['image'];							}							else{								$path = $rows_image[0]['create_year']."/".$rows_image[0]['create_month']."/".$rows_image[0]['create_date']."/".$rows_image[0]['id']."/thumb_";								$profile_image = 'https://castit.dk/profile_images/'.$path.$rows_image[0]['image'];							}						}						$lb_note = isset($_SESSION["lb_notes"][$row['id']]) ? $_SESSION["lb_notes"][$row['id']]: '' ;						$lb_pprofiles[] = array('id' 			=> $row['id'],											'bureau' 		=> $row['bureau'],											'nationality' 	=> $row['nationality'],											'name' 			=> $row['first_name'],											'first_name' 	=> $row['first_name'],											'last_name' 	=> $row['last_name'],											'profile_number' 	=> $row['profile_number'],											'profile_image' 	=> $profile_image,											'gender_id' 	=> $row['gender_id'],											'gender_name' 	=> $row['gender_name'],											'age' 			=> $age,											'height' 		=> $row['height'],											'weight' 		=> $row['weight'],											/*'address' 		=> $row['address'],											'zipcode' 		=> $row['zipcode'],											'city' 			=> $row['city'],											'phone' 		=> $row['phone'],											'cellphone' 	=> $row['cellphone'],											'email' 		=> $row['email'],*/											'job' 			=> $row['job'],											'lb_note' 			=> $lb_note,										);						}				}			}			$grouping_profile[] = array('group_id' => $rowgp['group_id'],										'group_name'=>$rowgp['group_name'],										'group_token'=>$rowgp['token_id'],										'addedon' => $rowgp['addedon'],										'group_profiles'=> $lb_pprofiles);		}	}	$reponse =  array('count'=> $rowcount, 'gpprofiles'=>$grouping_profile);	echoResponse(200, $reponse);  });/******************************************Purpose: Remove group from Grouping profiles listParameter : nullType : GET******************************************/$app->get('/addgroupintogrouping', function () use ($app) {     global $db;	$groupname =  $app->request->get('groupname');	$grouping = array();	$reponse = array();	$rowcount = 0;	//$grouping_token = generate_uuid();	$grouping_token = $app->request->get('grouptoken');		$query_check_gp = $db->prepare("SELECT * FROM `grouping` where `group_name` LIKE '%".$groupname."%' AND token_id = '".$grouping_token."'"); 	$query_check_gp->execute();	$rows_gp = $query_check_gp->fetchAll(PDO::FETCH_ASSOC);	if(count($rows_gp)>0) {		$gpid = $rows_gp[0]['group_id'];	}else{			$q_gruping = "INSERT INTO `grouping` ( `token_id`, `group_name`, `status`) VALUES ('".$grouping_token."', '".$groupname."','1')"; 			//echo $q; 			$gpid = $db->exec($q_gruping);	}	$reponse = array();	$rowcount = 0;	$grouping_profile = array();	$query_check_gb = $db->prepare("SELECT *, date_format(added_on , '%d.%m.%Y') as addedon  FROM grouping where status = '1' AND token_id = '".$grouping_token."' order by group_name asc"); 	$query_check_gb->execute();	$rows_gb = $query_check_gb->fetchAll(PDO::FETCH_ASSOC);	if(count($rows_gb)>0) {		$rowcount = count($rows_gb);		foreach($rows_gb as $rowgp){			$lb_pprofiles = array();			$gpid = 	$rowgp['group_id'];			$query_lb_pprofiles = $db->prepare("SELECT * FROM profile_grouping WHERE group_id ='".$gpid."'"); 			$query_lb_pprofiles->execute();			$rows_lb_pprofiles = $query_lb_pprofiles->fetchAll(PDO::FETCH_ASSOC);			$rowcountpg = count($rows_lb_pprofiles);			if($rowcountpg > 0){				foreach($rows_lb_pprofiles as $rowp) {											$query = $db->prepare("SELECT p.*, m.profile_group_id, m.profile_number, m.profile_number_first_name_last_name, m.version, m.current, g.name as gender_name, hc.name as hair_color_name, ec.name as eye_color_name FROM profiles p INNER JOIN memberships m ON m.profile_id = p.id INNER JOIN genders g ON g.id = p.gender_id INNER JOIN hair_colors hc ON hc.id = p.hair_color_id INNER JOIN eye_colors ec ON ec.id = p.eye_color_id  WHERE p.id='".$rowp['profile_id']."' AND (p.profile_status_id = '1' ) AND m.current ='1' LIMIT 1"); 						$query->execute();						$rows = $query->fetchAll(PDO::FETCH_ASSOC);						if(count($rows)>0) {							$row = $rows[0];								$birthdate = new DateTime($row['birthday']);								$today   = new DateTime('today');								$age = $birthdate->diff($today)->y;													// Profile Image								$profile_image ='';								$query_image = $db->prepare("SELECT *, DATE_FORMAT(created_at, '%Y') as create_year, DATE_FORMAT(created_at, '%m') as create_month, DATE_FORMAT(created_at, '%d') as create_date FROM photos WHERE profile_id = '".$row['id']."' and published ='1' and media_slet_status != '1' ORDER BY position ASC LIMIT 1"); 						$query_image->execute();						$image= '';						$rows_image = $query_image->fetchAll(PDO::FETCH_ASSOC);						if(count($rows_image) > 0){							if (strpos($rows_image[0]['path'], 'vhost') !== false) {								$profile_image = 'https://castit.dk/images/uploads/'.$rows_image[0]['image'];							}							else{								$path = $rows_image[0]['create_year']."/".$rows_image[0]['create_month']."/".$rows_image[0]['create_date']."/".$rows_image[0]['id']."/thumb_";								$profile_image = 'https://castit.dk/profile_images/'.$path.$rows_image[0]['image'];							}						}						$lb_note = isset($_SESSION["lb_notes"][$row['id']]) ? $_SESSION["lb_notes"][$row['id']]: '' ;						$lb_pprofiles[] = array('id' 			=> $row['id'],											'bureau' 		=> $row['bureau'],											'nationality' 	=> $row['nationality'],											'name' 			=> $row['first_name'],											'first_name' 	=> $row['first_name'],											'last_name' 	=> $row['last_name'],											'profile_number' 	=> $row['profile_number'],											'profile_image' 	=> $profile_image,											'gender_id' 	=> $row['gender_id'],											'gender_name' 	=> $row['gender_name'],											'age' 			=> $age,											'height' 		=> $row['height'],											'weight' 		=> $row['weight'],											/*'address' 		=> $row['address'],											'zipcode' 		=> $row['zipcode'],											'city' 			=> $row['city'],											'phone' 		=> $row['phone'],											'cellphone' 	=> $row['cellphone'],											'email' 		=> $row['email'],*/											'job' 			=> $row['job'],											'lb_note' 			=> $lb_note,										);						}				}			}			$grouping_profile[] = array('group_id' => $rowgp['group_id'],										'group_name'=>$rowgp['group_name'],										'group_token'=>$rowgp['token_id'],										'addedon' => $rowgp['addedon'],										'group_profiles'=> $lb_pprofiles);		}	}	$reponse =  array('count'=> $rowcount, 'gpprofiles'=>$grouping_profile);	echoResponse(200, $reponse);  });/******************************************Purpose: Get all available Countries detailsParameter : Type : GET******************************************/$app->get('/countries', function () use ($app) {     global $db;	$query_country = $db->prepare("SELECT * FROM countries order by name"); 	$query_country->execute();	$rows_countries = $query_country->fetchAll(PDO::FETCH_ASSOC);	    foreach($rows_countries as $row) {		$countries[] = array('id' => $row['id'],						  'name' => $row['name_dk']						);		}		// sort alphabetically by name		usort($countries, 'compare_country_name');		echoResponse(200, $countries);});function compare_country_name($a, $b){		return strnatcmp($a['name'], $b['name']);}$app->get('/countries/en', function () use ($app) {   global $db;	$query_country = $db->prepare("SELECT * FROM countries order by name"); 	$query_country->execute();	$rows_countries = $query_country->fetchAll(PDO::FETCH_ASSOC);  foreach($rows_countries as $row) {		$countries[] = array('id' => $row['id'],			'name' => $row['name']		);	}	usort($countries, 'compare_country_name');	echoResponse(200, $countries);});/******************************************Purpose: Register user step 1Parameter : nilType : POST******************************************/$app->post('/step1Create',function () use ($app) {     global $db;	$data =  json_decode($app->request->getBody(), true);  // echo '<pre>';print_r($_SESSION["step1"]);exit;	$response = array();	global $imageClass;	$_SESSION["step1"]["status"] =1;	$_SESSION["step1"]["first_name"]= $data['first_name'];	$_SESSION["step1"]["last_name"]= $data['last_name'];	if (isset($data['password'])) {		$_SESSION["step1"]["password"]= $data['password'];	}	$_SESSION["step1"]["address"]= $data['address'];	$_SESSION["step1"]["zipcode"]= $data['zipcode'];	$_SESSION["step1"]["city"]= $data['city'];	$_SESSION["step1"]["country_id"]= $data['country_id'];	$response = array('success' => true);				echoResponse(200, $response);});/******************************************Purpose: Clear restration step 1 if neededParameter : idType : GET******************************************/$app->get('/step1Clear',function () use ($app) {     global $db;	$user_id =  $app->request->get('id');		if(isset($_SESSION["step1"])){		unset ($_SESSION["step1"]);		$response = array('success' => true);	}	else{		$response = array('success' => false);	}	//print_r($rows);		echoResponse(200, $response);});/******************************************Purpose: Check restration step 1 completed or notParameter : idType : GET******************************************/$app->get('/checkstep1',function () use ($app) {     global $db;	$user_id =  $app->request->get('id');	$response = array('success' => false);	if(isset($_SESSION["step1"])){		if(isset($_SESSION["step1"]["status"])){			$response = array('success' => true, 'step1' => $_SESSION["step1"]);		}else{			$response = array('success' => false, 'step1' => '' );		}	}	else{		$response = array('success' => false, 'step1' => '' );	}	//print_r($rows);		echoResponse(200, $response);});/******************************************Purpose: Get years for dropdownParameter : Type : GET******************************************/$app->get('/years', function () use ($app) {     global $db;	for($i = 1925 ; $i < date('Y'); $i++){		$years[] = array('id' => $i,						  'name' => $i						);   }		echoResponse(200, $years);});/******************************************Purpose: Register user step 2Parameter : Form post parametersType : POST******************************************/$app->post('/step2Create',function () use ($app) {     global $db;	$data =  json_decode($app->request->getBody(), true);	$response = array();	global $imageClass;	$_SESSION["step2"]["status"] =1;	$_SESSION["step2"]["email"]= $data['email'];	$_SESSION["step2"]["phone"]= $data['phone'];	$_SESSION["step2"]["phone_at_work"]= $data['phone_at_work'];	$_SESSION["step2"]["gender_id"]= $data['gender_id'];	$_SESSION["step2"]["birth_day"]= $data['birth_day'];	$_SESSION["step2"]["birth_month"]= $data['birth_month'];	$_SESSION["step2"]["birth_year"]= $data['birth_year'];	$_SESSION["step2"]["ethnic_origin"]= $data['ethnic_origin'];	$_SESSION["step2"]["job"]= $data['job'];	$response = array('success' => true);				echoResponse(200, $response);});/******************************************Purpose: Clear restration step 2 if neededParameter : idType : GET******************************************/$app->get('/step2Clear',function () use ($app) {     global $db;		if(isset($_SESSION["step2"])){		unset ($_SESSION["step2"]);		$response = array('success' => true);	}	else{		$response = array('success' => false);	}	//print_r($rows);		echoResponse(200, $response);});/******************************************Purpose: Check restration step 2 completed or notParameter : idType : GET******************************************/$app->get('/checkstep2',function () use ($app) {     global $db;	$user_id =  $app->request->get('id');	$response = array('success' => false);	if(isset($_SESSION["step1"])){		if(isset($_SESSION["step1"]["status"])){			$response['step1status'] = true;		}else{			$response['step1status'] = false;		}	}	else{		$response['step1status'] = false;	}	if(isset($_SESSION["step2"])){		if(isset($_SESSION["step2"]["status"])){			$response['step2status'] = true;			$response['step2'] = $_SESSION["step2"];						$dateOfBirth = $_SESSION["step2"]["birth_year"]."-".$_SESSION["step2"]["birth_month"]."-".$_SESSION["step2"]["birth_day"];			$today = date("Y-m-d");			$diff = date_diff(date_create($dateOfBirth), date_create($today));			$response['age']=$diff->format('%y');		}else{			$response['step2status'] = false;		}	}	else{		$response['step2status'] = false;	}	//print_r($rows);		echoResponse(200, $response);});/******************************************Purpose: get required data for step 3 Parameter : idType : GET******************************************/$app->get('/getstep3data',function () use ($app) {     global $db;	$user_id =  $app->request->get('id');	$response = array();	$eye_colors = $db->prepare("SELECT * FROM eye_colors ORDER BY sortby"); 	$eye_colors->execute();	$eye_colors_list = $eye_colors->fetchAll(PDO::FETCH_ASSOC);	$response['eye_colors']=$eye_colors_list;	$hair_colors = $db->prepare("SELECT * FROM hair_colors ORDER BY sortby"); 	$hair_colors->execute();	$hair_colors_list = $hair_colors->fetchAll(PDO::FETCH_ASSOC);	$response['hair_colors']=$hair_colors_list;	$gender = $db->prepare("SELECT * FROM genders"); 	$gender->execute();	$gender_list = $gender->fetchAll(PDO::FETCH_ASSOC);	$response['gender']=$gender_list;	echoResponse(200, $response);	});$app->get('/getstep2data',function () use ($app) {     global $db;	$user_id =  $app->request->get('id');	$response = array();	$gender = $db->prepare("SELECT * FROM genders"); 	$gender->execute();	$gender_list = $gender->fetchAll(PDO::FETCH_ASSOC);	$response['gender']=$gender_list;	echoResponse(200, $response);	});/******************************************Purpose: Register user step 3Parameter : Form post parametersType : POST******************************************/$app->post('/step3Create',function () use ($app) {     global $db;	$data =  json_decode($app->request->getBody(), true);	$response = array();	global $imageClass;	$_SESSION["step3"]["status"] 			= 1;	$_SESSION["step3"]["shirt_size_from"]	= isset($data['shirt_size_from']) ? $data['shirt_size_from'] : '-';	$_SESSION["step3"]["shirt_size_to"]		= isset($data['shirt_size_to']) ? $data['shirt_size_to'] : '-';	$_SESSION["step3"]["pants_size_from"]	= isset($data['pants_size_from']) ? $data['pants_size_from'] : '-';	$_SESSION["step3"]["pants_size_to"]		= isset($data['pants_size_to']) ? $data['pants_size_to'] : '-';	$_SESSION["step3"]["shoe_size_from"]	= isset($data['shoe_size_from']) ? $data['shoe_size_from'] : '-';	$_SESSION["step3"]["shoe_size_to"]		= isset($data['shoe_size_to']) ? $data['shoe_size_to'] : '-';	$_SESSION["step3"]["suite_size_from"]	= isset($data['suite_size_from']) ? $data['suite_size_from'] : '-';	$_SESSION["step3"]["suite_size_to"]		= isset($data['suite_size_to']) ? $data['suite_size_to'] : '-';	$_SESSION["step3"]["children_sizes"]	= isset($data['children_sizes']) ? $data['children_sizes'] : '-';	$_SESSION["step3"]["eye_color_id"]		= isset($data['eye_color_id']) ? $data['eye_color_id'] : '-';	$_SESSION["step3"]["hair_color_id"]		= isset($data['hair_color_id']) ? $data['hair_color_id'] : '-';	$_SESSION["step3"]["bra_size"]			= isset($data['bra_size']) ? $data['bra_size'] : '-';	$_SESSION["step3"]["height"]			= isset($data['height']) ? $data['height'] : '-';	$_SESSION["step3"]["weight"]			= isset($data['weight']) ? $data['weight'] : '-';	$response = array('success' => true);				echoResponse(200, $response);});/******************************************Purpose: Clear restration step 3 if neededParameter : idType : GET******************************************/$app->get('/step3Clear',function () use ($app) {     global $db;		if(isset($_SESSION["step3"])){		unset ($_SESSION["step3"]);		$response = array('success' => true);	}	else{		$response = array('success' => false);	}	//print_r($rows);		echoResponse(200, $response);});/******************************************Purpose: Check restration step 3 completed or notParameter : idType : GET******************************************/$app->get('/checkstep3',function () use ($app) {     global $db;	$user_id =  $app->request->get('id');	$response = array('success' => false);		// Check Step 1 is valid	if(isset($_SESSION["step1"])){		if(isset($_SESSION["step1"]["status"])){			$response['step1status'] = true;		}else{			$response['step1status'] = false;		}	}	else{		$response['step1status'] = false;	}		//Check Step 2 is valid	if(isset($_SESSION["step2"])){		if(isset($_SESSION["step2"]["status"])){			$response['step2status'] = true;		}else{			$response['step2status'] = false;		}	}	else{		$response['step2status'] = false;	}		//Check Step 3 is valid	if(isset($_SESSION["step3"])){		if(isset($_SESSION["step3"]["status"])){			$response['step3status'] = true;			$response['step3'] = $_SESSION["step3"];		}else{			$response['step3status'] = false;		}	}	else{		$response['step3status'] = false;	}	//print_r($rows);		echoResponse(200, $response);});/******************************************Purpose: Get categories for dropdownParameter : Type : GET******************************************/$app->get('/getcategories', function () use ($app) {     global $db;	$query_categories = $db->prepare("SELECT * FROM categories order by sortby"); 	$query_categories->execute();	$rows_categories = $query_categories->fetchAll(PDO::FETCH_ASSOC);	    foreach($rows_categories as $row) {		$categories[] = array('id' => $row['id'],						  'name' => $row['name'],						);	}	echoResponse(200, $categories);});$app->get('/getcategories/en', function () use ($app) {     global $db;	$query_categories = $db->prepare("SELECT * FROM categories order by sortby"); 	$query_categories->execute();	$rows_categories = $query_categories->fetchAll(PDO::FETCH_ASSOC);	    foreach($rows_categories as $row) {		$categories[] = array('id' => $row['id'],						  'name' => $row['name_en'],						);	}	echoResponse(200, $categories);});/******************************************Purpose: Get skills for dropdownParameter : Type : GET******************************************/$app->get('/getskills', function () use ($app) {     global $db;	$query_skills = $db->prepare("SELECT * FROM skills order by sortby"); 	$query_skills->execute();	$rows_skills = $query_skills->fetchAll(PDO::FETCH_ASSOC);	    foreach($rows_skills as $row) {		$skills[] = array('id' => $row['id'],						  'name' => $row['name']						);	}	echoResponse(200, $skills);});$app->get('/getskills/en', function () use ($app) {     global $db;	$query_skills = $db->prepare("SELECT * FROM skills order by sortby"); 	$query_skills->execute();	$rows_skills = $query_skills->fetchAll(PDO::FETCH_ASSOC);	    foreach($rows_skills as $row) {		$skills[] = array('id' => $row['id'],						  'name' => $row['name_en']						);	}	echoResponse(200, $skills);});/******************************************Purpose: Get Drivers licences for dropdownParameter : Type : GET******************************************/$app->get('/getlicences', function () use ($app) {     global $db;	$query_licence = $db->prepare("SELECT * FROM drivers_licenses order by sortby"); 	$query_licence->execute();	$rows_licences = $query_licence->fetchAll(PDO::FETCH_ASSOC);	    foreach($rows_licences as $row) {		$licences[] = array('id' => $row['id'],						  'name' => $row['name']						);	}	echoResponse(200, $licences);});$app->get('/getlicences/en', function () use ($app) {     global $db;	$query_licence = $db->prepare("SELECT * FROM drivers_licenses order by sortby"); 	$query_licence->execute();	$rows_licences = $query_licence->fetchAll(PDO::FETCH_ASSOC);	    foreach($rows_licences as $row) {		$licences[] = array('id' => $row['id'],						  'name' => $row['name_en']						);	}	echoResponse(200, $licences);});/******************************************Purpose: Register user step 4Parameter : Form post parametersType : POST******************************************/$app->post('/step4Create',function () use ($app) {     global $db;	$data =  json_decode($app->request->getBody(), true);	$response = array();	global $imageClass;	$_SESSION["step4"]["status"] = 1;	$_SESSION["step4"]["notes"]	= $data['notes'];	$_SESSION["step4"]["sports_hobby"] = $data['sportshobby'];	$_SESSION["step4"]["selectedcategories"]	= $data['selectedcategories'];	$_SESSION["step4"]["selectedskills"]	= $data['selectedskills'];	$_SESSION["step4"]["selectedlicences"]	= $data['selectedlicences'];	$response = array('success' => true);				echoResponse(200, $response);});/******************************************Purpose: Clear restration step 4 if neededParameter : idType : GET******************************************/$app->get('/step4Clear',function () use ($app) {     global $db;		if(isset($_SESSION["step4"])){		unset ($_SESSION["step4"]);		$response = array('success' => true);	}	else{		$response = array('success' => false);	}	//print_r($rows);		echoResponse(200, $response);});/******************************************Purpose: Check restration step 4 completed or notParameter : idType : GET******************************************/$app->get('/checkstep4',function () use ($app) {     global $db;	$user_id =  $app->request->get('id');	$response = array('success' => false);		// Check Step 1 is valid	if(isset($_SESSION["step1"])){		if(isset($_SESSION["step1"]["status"])){			$response['step1status'] = true;		}else{			$response['step1status'] = false;		}	}	else{		$response['step1status'] = false;	}		//Check Step 2 is valid	if(isset($_SESSION["step2"])){		if(isset($_SESSION["step2"]["status"])){			$response['step2status'] = true;		}else{			$response['step2status'] = false;		}	}	else{		$response['step2status'] = false;	}		//Check Step 3 is valid	if(isset($_SESSION["step3"])){		if(isset($_SESSION["step3"]["status"])){			$response['step3status'] = true;		}else{			$response['step3status'] = false;		}	}	else{		$response['step3status'] = false;	}		//Check Step 4 is valid	if(isset($_SESSION["step4"])){		if(isset($_SESSION["step4"]["status"])){			$response['step4status'] = true;			$response['step4'] = $_SESSION["step4"];		}else{			$response['step4status'] = false;		}	}	else{		$response['step4status'] = false;	}	//print_r($rows);		echoResponse(200, $response);});/******************************************Purpose: Get available languages for dropdownParameter : NilType : GET******************************************/$app->get('/getlanguages', function () use ($app) {     global $db;	$query_language = $db->prepare("SELECT * FROM language_proficiency_languages order by name"); 	$query_language->execute();	$rows_language = $query_language->fetchAll(PDO::FETCH_ASSOC);	    foreach($rows_language as $row) {		$languages[] = array('id' => $row['id'],						  'name' => $row['name']						);	}	usort($languages, 'compare_language_name');	echoResponse(200, $languages);});function compare_language_name($a, $b){	return strnatcmp($a['name'], $b['name']);}$app->get('/getlanguages/en', function () use ($app) { 	global $db;$query_language = $db->prepare("SELECT * FROM language_proficiency_languages order by name_en"); $query_language->execute();$rows_language = $query_language->fetchAll(PDO::FETCH_ASSOC);	foreach($rows_language as $row) {	$languages[] = array('id' => $row['id'],						'name' => $row['name_en']					);}usort($languages, 'compare_language_name');echoResponse(200, $languages);});/******************************************Purpose: Get rating icons for available languagesParameter : Type : GET******************************************/$app->get('/getlanguageratings', function () use ($app) {     global $db;		$langratings = array();		$ratingar = array();	$ratingid =  $app->request->get('ratingid');	if($ratingid)		$ratingar = explode(',',$ratingid);	for($lc = 0; $lc < 4;$lc++){		$langstar = array();		$ratingval  = (isset($ratingar[$lc])) ? $ratingar[$lc] : 0 ;		$langrateid = $lc+1;		for($lr = 1; $lr <= 4;$lr++){			$langstar[] = array('starid' => $lr,'star'=>($lr <= $ratingval) ? 'star-white.png': 'star-black.png');		}		$langratings[$lc]=array('langrateid'=> $langrateid, 'rating'=>$ratingval,'ratingicon'=>$langstar);	}	echoResponse(200, $langratings);});/******************************************Purpose: Register user step 5Parameter : Form post parametersType : POST******************************************/$app->post('/step5Create',function () use ($app) {     global $db;	$data =  json_decode($app->request->getBody(), true);	$response = array();	global $imageClass;	$_SESSION['operation'] = isset($data['operation']) ? $data['operation'] : "insert";	$_SESSION['user_profile_id'] = isset($data['user_profile_id']) ? $data['user_profile_id'] : "";	$_SESSION["step5"]["status"] 			=1;	if(isset($data['lang1']))		$_SESSION["step5"]["lang1"]	= $data['lang1'];	if(isset($data['lang2']))		$_SESSION["step5"]["lang2"]	= $data['lang2'];	if(isset($data['lang3']))		$_SESSION["step5"]["lang3"]	= $data['lang3'];	if(isset($data['lang4']))		$_SESSION["step5"]["lang4"]	= $data['lang4'];	if(isset($data['langrateval1']))		$_SESSION["step5"]["langrateval1"]	= $data['langrateval1'];	if(isset($data['langrateval2']))		$_SESSION["step5"]["langrateval2"]	= $data['langrateval2'];	if(isset($data['langrateval3']))		$_SESSION["step5"]["langrateval3"]	= $data['langrateval3'];	if(isset($data['langrateval4']))		$_SESSION["step5"]["langrateval4"]	= $data['langrateval4'];	if(isset($data['lng_pro_id1']))		$_SESSION["step5"]["lng_pro_id1"]	= $data['lng_pro_id1'];	if(isset($data['lng_pro_id2']))		$_SESSION["step5"]["lng_pro_id2"]	= $data['lng_pro_id2'];	if(isset($data['lng_pro_id3']))		$_SESSION["step5"]["lng_pro_id3"]	= $data['lng_pro_id3'];	if(isset($data['lng_pro_id4']))		$_SESSION["step5"]["lng_pro_id4"]	= $data['lng_pro_id4'];	if(isset($data['dealekter1']))		$_SESSION["step5"]["dealekter1"]	= $data['dealekter1'];	if(isset($data['dealekter2']))		$_SESSION["step5"]["dealekter2"]	= $data['dealekter2'];	if(isset($data['dealekter3']))		$_SESSION["step5"]["dealekter3"]	= $data['dealekter3'];	$response = array('success' => true);				echoResponse(200, $response);});/******************************************Purpose: Clear restration step 5 if neededParameter : idType : GET******************************************/$app->get('/step5Clear',function () use ($app) {     global $db;		if(isset($_SESSION["step4"])){		unset ($_SESSION["step4"]);		$response = array('success' => true);	}	else{		$response = array('success' => false);	}	//print_r($rows);		echoResponse(200, $response);});/******************************************Purpose: Check restration step 5 completed or notParameter : idType : GET******************************************/$app->get('/checkstep5',function () use ($app) {     global $db;	$user_id =  $app->request->get('id');	$response = array('success' => false);		// Check Step 1 is valid	if(isset($_SESSION["step1"])){		if(isset($_SESSION["step1"]["status"])){			$response['step1status'] = true;		}else{			$response['step1status'] = false;		}	}	else{		$response['step1status'] = false;	}		//Check Step 2 is valid	if(isset($_SESSION["step2"])){		if(isset($_SESSION["step2"]["status"])){			$response['step2status'] = true;		}else{			$response['step2status'] = false;		}	}	else{		$response['step2status'] = false;	}		//Check Step 3 is valid	if(isset($_SESSION["step3"])){		if(isset($_SESSION["step3"]["status"])){			$response['step3status'] = true;		}else{			$response['step3status'] = false;		}	}	else{		$response['step3status'] = false;	}		//Check Step 4 is valid	if(isset($_SESSION["step4"])){		if(isset($_SESSION["step4"]["status"])){			$response['step4status'] = true;		}else{			$response['step4status'] = false;		}	}	else{		$response['step4status'] = false;	}		//Check Step 5 is valid	if(isset($_SESSION["step5"])){		if(isset($_SESSION["step5"]["status"])){			$response['step5status'] = true;			$response['step5'] = $_SESSION["step5"];		}else{			$response['step5status'] = false;		}	}	else{		$response['step5status'] = false;	}	//print_r($rows);		echoResponse(200, $response);});/******************************************Purpose: Register user step 5Parameter : Form post parametersType : POST******************************************/$app->post('/step6Create',function () use ($app) { 	unset($_SESSION['Image_file_location']);	unset($_SESSION['Video_file_location']);	unset($_SESSION['Video_file']['name']);	unset($_SESSION['Image_file']['name']);	// ppe($_SESSION);	});$app->post('/step7Create', function() use ($app){	// echo '<pre>';	// var_dump($_SESSION);	// exit;	$operation = (isset($_SESSION['operation'])) ? $_SESSION['operation'] : 'insert';	$user_profile_id = (isset($_SESSION['user_profile_id'])) ? $_SESSION['user_profile_id'] : '';	global $db;	$first_name=$_SESSION["step1"]["first_name"];	$last_name=$_SESSION["step1"]["last_name"];	$password=$_SESSION["step1"]["password"];	$hashed_password=md5($password);	$address=$_SESSION["step1"]["address"];	$zipcode=$_SESSION["step1"]["zipcode"];	$city=$_SESSION["step1"]["city"];	$country_id=$_SESSION["step1"]["country_id"];		$email=$_SESSION["step2"]["email"];	$phone=$_SESSION["step2"]["phone"];	$phone_at_work=$_SESSION["step2"]["phone_at_work"];	$gender_id=$_SESSION["step2"]["gender_id"];	$birth_day=$_SESSION["step2"]["birth_day"];	$birth_month=$_SESSION["step2"]["birth_month"];	$birth_year=$_SESSION["step2"]["birth_year"];	$birthday=$birth_year."-".$birth_month."-".$birth_day;	$ethnic_origin=$_SESSION["step2"]["ethnic_origin"];	$job=$_SESSION["step2"]["job"];	$shirt_size_from=$_SESSION["step3"]["shirt_size_from"]!=''?(int)$_SESSION["step3"]["shirt_size_from"]:'NULL';		$shirt_size_to=$_SESSION["step3"]["shirt_size_to"]!=''?(int)$_SESSION["step3"]["shirt_size_to"]:'NULL';	$pants_size_from=$_SESSION["step3"]["pants_size_from"]!=''?(int)$_SESSION["step3"]["pants_size_from"]:'NULL';	$pants_size_to=$_SESSION["step3"]["pants_size_to"]!=''?(int)$_SESSION["step3"]["pants_size_to"]:'NULL';	$shoe_size_from=$_SESSION["step3"]["shoe_size_from"]!=''?(int)$_SESSION["step3"]["shoe_size_from"]:'NULL';	$shoe_size_to=$_SESSION["step3"]["shoe_size_to"]!=''?(int)$_SESSION["step3"]["shoe_size_to"]:'NULL';	$suite_size_from=$_SESSION["step3"]["suite_size_from"]!=''?(int)$_SESSION["step3"]["suite_size_from"]:'NULL';	$suite_size_to=$_SESSION["step3"]["suite_size_to"]!=''?(int)$_SESSION["step3"]["suite_size_to"]:'NULL';	$children_sizes=$_SESSION["step3"]["children_sizes"]!=''?(int)$_SESSION["step3"]["children_sizes"]:'NULL';	$eye_color_id=$_SESSION["step3"]["eye_color_id"]!=''?$_SESSION["step3"]["eye_color_id"]:'NULL';	$hair_color_id=$_SESSION["step3"]["hair_color_id"]!=''?$_SESSION["step3"]["hair_color_id"]:'NULL';	$bra_size=$_SESSION["step3"]["bra_size"]!=''?(string)$_SESSION["step3"]["bra_size"]:'NULL';	$height=$_SESSION["step3"]["height"]!=''?(string)$_SESSION["step3"]["height"]:'NULL';	$weight=$_SESSION["step3"]["weight"]!=''?(string)$_SESSION["step3"]["weight"]:'NULL';	$notes=$_SESSION["step4"]["notes"];	$sports_hobby=$_SESSION["step4"]["sports_hobby"];	$selectedcategories=$_SESSION["step4"]["selectedcategories"];	$selectedskills=$_SESSION["step4"]["selectedskills"];	$selectedlicences=$_SESSION["step4"]["selectedlicences"];	$languages=array();	if(isset($_SESSION["step5"]["lang1"])&& $_SESSION["step5"]["lang1"]!='')		$languages[0]['language_id']=$_SESSION["step5"]["lang1"];	if(isset($_SESSION["step5"]["lang2"])&& $_SESSION["step5"]["lang2"]!='')		$languages[1]['language_id']=$_SESSION["step5"]["lang2"];	if(isset($_SESSION["step5"]["lang3"])&& $_SESSION["step5"]["lang3"]!='')		$languages[2]['language_id']=$_SESSION["step5"]["lang3"];	if(isset($_SESSION["step5"]["lang4"])&& $_SESSION["step5"]["lang4"]!='')		$languages[3]['language_id']=$_SESSION["step5"]["lang4"];	if(isset($_SESSION["step5"]["langrateval1"]) && $_SESSION["step5"]["langrateval1"]!='')		$languages[0]['rating_id']=$_SESSION["step5"]["langrateval1"];	if(isset($_SESSION["step5"]["langrateval2"]) && $_SESSION["step5"]["langrateval2"]!='')		$languages[1]['rating_id']=$_SESSION["step5"]["langrateval2"];	if(isset($_SESSION["step5"]["langrateval3"]) && $_SESSION["step5"]["langrateval3"]!='')		$languages[2]['rating_id']=$_SESSION["step5"]["langrateval3"];	if(isset($_SESSION["step5"]["langrateval4"]) && $_SESSION["step5"]["langrateval4"]!='')		$languages[3]['rating_id']=$_SESSION["step5"]["langrateval4"];	if(isset($_SESSION["step5"]["lng_pro_id1"]) && $_SESSION["step5"]["lng_pro_id1"]!='')		$languages[0]['lng_pro_id']=$_SESSION["step5"]["lng_pro_id1"];	if(isset($_SESSION["step5"]["lng_pro_id2"]) && $_SESSION["step5"]["lng_pro_id2"]!='')		$languages[1]['lng_pro_id']=$_SESSION["step5"]["lng_pro_id2"];	if(isset($_SESSION["step5"]["lng_pro_id3"]) && $_SESSION["step5"]["lng_pro_id3"]!='')		$languages[2]['lng_pro_id']=$_SESSION["step5"]["lng_pro_id3"];	if(isset($_SESSION["step5"]["lng_pro_id4"]) && $_SESSION["step5"]["lng_pro_id4"]!='')		$languages[3]['lng_pro_id']=$_SESSION["step5"]["lng_pro_id4"];		$dealekter1 = '';		$dealekter2 = '';		$dealekter3 = '';	if(isset($_SESSION["step5"]["dealekter1"]) && $_SESSION["step5"]["dealekter1"]!='')		$dealekter1=$_SESSION["step5"]["dealekter1"];	if(isset($_SESSION["step5"]["dealekter2"]) && $_SESSION["step5"]["dealekter2"]!='')		$dealekter2=$_SESSION["step5"]["dealekter2"];	if(isset($_SESSION["step5"]["dealekter3"]) && $_SESSION["step5"]["dealekter3"]!='')		$dealekter3=$_SESSION["step5"]["dealekter3"];	$agreed_to_these_terms=1;	if($operation == 'insert'){		$q_chip = "INSERT INTO `profiles` ( 			`first_name`, 			`last_name`, 			`gender_id`, 			`hair_color_id`,			`eye_color_id`, 			`birthday`, 			`height`, 			`weight`, 			`shoe_size_from`, 			`shoe_size_to`, 			`shirt_size_from`,			`shirt_size_to`,			`pants_size_from`,			`pants_size_to`,			`bra_size`,			`children_sizes`,			`address`,			`zipcode`,			`city`,			`country_id`,			`phone`,			`phone_at_work`,			`email`,			`job`,			`notes`,			`agreed_to_these_terms`,			`password`,			`hashed_password`,			`created_at`,			`updated_at`,			`suite_size_from`,			`suite_size_to`,			`sports_hobby`,			`ethnic_origin`,			`dealekter1`,			`dealekter2`,			`dealekter3`) 			VALUES (				'".$first_name."',				'".$last_name."',				'".$gender_id."',				'".$hair_color_id."',				'".$eye_color_id."',				'".$birthday."',				'".$height."',				'".$weight."',				".$shoe_size_from.",				".$shoe_size_to.",				".$shirt_size_from.",				".$shirt_size_to.",				".$pants_size_from.",				".$pants_size_to.",				'".$bra_size."',				".$children_sizes.",				'".$address."',				'".$zipcode."',				'".$city."',				'".$country_id."',				'".$phone."',				'".$phone_at_work."',				'".$email."',				'".$job."',				'".$notes."',				'".$agreed_to_these_terms."',				'".$password."',				'".$hashed_password."',				now(),				now(),				".$suite_size_from.",				".$suite_size_to.",				'".$sports_hobby."',				'".$ethnic_origin."',				'".$dealekter1."',				'".$dealekter2."',				'".$dealekter3."'				)";		$profile_id = $db->exec($q_chip);		$user_profile_id = $profile_id;		if($profile_id){						// 1 male - YM; 2 female - YF			$profile_number_prefix = ($gender_id == 2) ? "YF":"YM";			$max_existing = $db->prepare("SELECT MAX(CAST(SUBSTRING(profile_number, 3) AS UNSIGNED)) as max_profile FROM memberships where profile_number LIKE 'YF%' OR profile_number LIKE 'YM%' ");			$max_existing->execute();			$max_profile = $max_existing->fetchAll(PDO::FETCH_ASSOC);						$profile_number = $profile_number_prefix . ($max_profile[0]['max_profile'] + 1);			$profile_number_first_name_last_name = $profile_number . " " . $first_name . " " . $last_name;			$version = 1;			$created_at = date("o-m-d H:i:s");			$current = 1;			$set_to_current_at = date("o-m-d");			$previous_profile_group_id = 1;			$previous_profile_number = '';			$membership_table_query = "INSERT INTO				memberships(				`profile_id`, 				`profile_group_id`, 				`profile_number`, 				`profile_number_first_name_last_name`, 				`version`, 				`created_at`, 				`current`, 				`set_to_current_at`, 				`previous_profile_group_id`, 				`previous_profile_number`)				VALUES				('$profile_id', 1, '$profile_number', '$profile_number_first_name_last_name', '$version', '$created_at', '$current', '$set_to_current_at', '$previous_profile_group_id', '$previous_profile_number' )";					$activation = $db->prepare($membership_table_query);			$activation->execute();			if($selectedcategories!=''){				if(!(is_array($selectedcategories))){					$cat_arr= explode(",",$selectedcategories);				}				else{					$cat_arr= $selectedcategories;				}				foreach($cat_arr as $cat){					$query = "INSERT INTO `categories_profiles` (`profile_id`,`category_id`) VALUES ('".$profile_id."','".$cat."')";					$db->exec($query);				}			}			if($selectedskills!=''){				if(!(is_array($selectedskills))){					$skill_arr= explode(",",$selectedskills);				}				else{					$skill_arr= $selectedskills;				}				foreach($skill_arr as $skill){					$query = "INSERT INTO `profiles_skills` (`profile_id`,`skill_id`) VALUES ('".$profile_id."','".$skill."')";					$db->exec($query);				}			}			if($selectedlicences){				if(!(is_array($selectedlicences))){					$license_arr= explode(",",$selectedlicences);				}				else{					$license_arr= $selectedlicences;				}				foreach($license_arr as $license){				$query = "INSERT INTO `drivers_licenses_profiles` (`profile_id`,`drivers_license_id`) VALUES ('".$profile_id."','".$license."')";				$db->exec($query);				}			}			if(!empty($languages)){				foreach($languages as $language){					$query = "INSERT INTO `language_proficiencies` (`language_proficiency_language_id`,`profile_id`,`language_proficiency_rating_id`,`created_at`,`updated_at`) VALUES ('".$language['language_id']."','".$profile_id."','".$language['rating_id']."',now(),now())";					//echo $query;					$db->exec($query);				}			}						echoResponse(200,array('status'=>true,'msg'=>'Tak for din oprettelse. Du modtager en mail fra os inden for 2 uger, når vi har kigget din ansøgning igennem','email'=>$email, 'first_name'=>$first_name, 'last_name'=>$last_name, 'profile_number'=>$profile_number, 'profile_id'=> $profile_id));		}		else{			echoResponse(200,array('status'=>false,'msg'=>'Couldn\'t Register, Please try again later'));		}	}	if($operation == "update"){		if($user_profile_id != ""){			$q_chip =  "UPDATE profiles 									 SET									 first_name = '$first_name', 									last_name = '$last_name', 									gender_id = $gender_id, 									hair_color_id = $hair_color_id,									eye_color_id = $eye_color_id, 									birthday = '$birthday',									height = '$height', 									weight = '$weight', 									shoe_size_from = $shoe_size_from, 									shoe_size_to = $shoe_size_to,									shirt_size_from = $shirt_size_from,									shirt_size_to = $shirt_size_to,									pants_size_from = $pants_size_from,									pants_size_to = $pants_size_to,									bra_size = '$bra_size',									children_sizes = $children_sizes,									address = '$address',									zipcode = '$zipcode',									city = '$city',									country_id = $country_id,									phone = '$phone',									phone_at_work = '$phone_at_work',									email = '$email',									job = '$job',									notes = '$notes',									agreed_to_these_terms = $agreed_to_these_terms,									password = '$password',									hashed_password = '$hashed_password',									updated_at = now(),									suite_size_from = $suite_size_from,									suite_size_to = $suite_size_to,									ethnic_origin = '$ethnic_origin',									sports_hobby = '$sports_hobby',									dealekter1 = '$dealekter1',									dealekter2 = '$dealekter2',									dealekter3 = '$dealekter3'								WHERE id = $user_profile_id";								// echo $q_chip;								// exit;					$query_prepared = $db->prepare($q_chip);					$query_prepared->execute();			}			$check_membership_query		= "SELECT * from memberships where profile_id = $user_profile_id";			$check_membership 				= $db->prepare($check_membership_query);			$check_membership->execute();			$m_count = $check_membership->rowCount();			if($m_count > 0){			  $membership_table_query = "UPDATE memberships SET current = '1' WHERE profile_id = $user_profile_id";	}	else{	  // 1 male - CM; 2 female - CF	  $profile_number_prefix = ($gender_id == 2) ? "CF":"CM";	  $max_existing = $db->prepare("SELECT MAX(CAST(SUBSTRING(profile_number, 3) AS UNSIGNED)) as max_profile FROM memberships where profile_number LIKE 'CF%' OR profile_number LIKE 'CM%' ");	  $max_existing->execute();	  $max_profile = $max_existing->fetchAll(PDO::FETCH_ASSOC);	  	  $profile_number = $profile_number_prefix . ($max_profile[0]['max_profile'] + 1);	  $profile_number_first_name_last_name = $profile_number . " " . $first_name . " " . $last_name;	  $version = 1;	  $created_at = date("o-m-d H:i:s");	  $current = 1;	  $set_to_current_at = date("o-m-d");	  $previous_profile_group_id = 1;	  $previous_profile_number = '';	  $membership_table_query = "INSERT INTO		memberships(		`profile_id`, 		`profile_group_id`, 		`profile_number`, 		`profile_number_first_name_last_name`, 		`version`, 		`created_at`, 		`current`, 		`set_to_current_at`, 		`previous_profile_group_id`, 		`previous_profile_number`)		VALUES		('$user_profile_id', 1, '$profile_number', '$profile_number_first_name_last_name', '$version', '$created_at', '$current', '$set_to_current_at', '$previous_profile_group_id', '$previous_profile_number' )";	}	$activation = $db->prepare($membership_table_query);	$activation->execute();			if($selectedcategories!=''){				if(!(is_array($selectedcategories))){					$cat_arr= explode(",",$selectedcategories);				}				else{					$cat_arr= $selectedcategories;				}								$clear_existance_query = $db->prepare("delete from categories_profiles where profile_id = ".$user_profile_id);				$clear_existance_query->execute();				foreach($cat_arr as $cat){					$query = "INSERT INTO `categories_profiles` (`profile_id`,`category_id`) VALUES ('".$user_profile_id."','".$cat."')";					$query_prepared = $db->prepare($query);					$query_prepared->execute();				}			}			if($selectedskills!=''){				if(!(is_array($selectedskills))){					$skill_arr= explode(",",$selectedskills);				}				else{					$skill_arr= $selectedskills;				}								$clear_existance_query = $db->prepare("delete from profiles_skills where profile_id = ".$user_profile_id);				$clear_existance_query->execute();				foreach($skill_arr as $skill){					$query = "INSERT INTO `profiles_skills` (`profile_id`,`skill_id`) VALUES ('".$user_profile_id."','".$skill."')";					$query_prepared = $db->prepare($query);					$query_prepared->execute();				}			}			if($selectedlicences){				if(!(is_array($selectedlicences))){					$license_arr= explode(",",$selectedlicences);				}				else{					$license_arr= $selectedlicences;				}				$clear_existance_query = $db->prepare("delete from drivers_licenses_profiles where profile_id = ".$user_profile_id);    		$clear_existance_query->execute();				foreach($license_arr as $license){					$sql_query = "INSERT INTO `drivers_licenses_profiles` (`profile_id`,`drivers_license_id`) VALUES ('".$user_profile_id."','".$license."')";					$prepared_query = $db->prepare($sql_query);					$prepared_query->execute();				}			}			if(!empty($languages)){				$clear_existance_query = $db->prepare("delete from language_proficiencies where profile_id = ".$user_profile_id);				$clear_existance_query->execute();				foreach($languages as $language){					$language_id = $language['language_id'];					$rating_id = $language['rating_id'];										if($language_id != 0 && $language_id != ''){						$query = "INSERT INTO `language_proficiencies` (`language_proficiency_language_id`,`profile_id`,`language_proficiency_rating_id`,`created_at`,`updated_at`) VALUES ('".$language['language_id']."','".$user_profile_id."','".$language['rating_id']."',now(),now())";					}					$query_prepared = $db->prepare($query);					$query_prepared->execute();				}			}			/*			if(isset($_SESSION['Image_file'])){				foreach($_SESSION['Image_file'] as $key => $image){					$filename = $image['name'][0];					$location = $_SERVER['DOCUMENT_ROOT'].'/images/uploads/';					move_uploaded_file($image['tmp_name'][0],$location.$filename);					$check_existing_record = "SELECT profile_id from photos where profile_id = $user_profile_id AND position = $key";					$check_existance = $db->prepare($check_existing_record);					$check_existance->execute();					$rowcount = $check_existance->rowCount();					if($rowcount > 0){						$query = "UPDATE photos 											SET												path = '$location',												original_path = '$location',												filename = '$filename',												published = 1,												phototype_id = 1,												image = '$filename',												updated_at = now(),												image_tmp = '$filename',												image_processing = 1,												image_token = '$filename'											WHERE												profile_id = $user_profile_id AND												position = $key";					}					else{						$query = "INSERT INTO `photos` (`path`,`original_path`,`profile_id`,`filename`,`published`,`position`,`phototype_id`,`image`,`created_at`,`updated_at`,`image_tmp`,`image_processing`,`image_token`) VALUES ('".$location."','".$location."','".$user_profile_id."','".$filename."','1','".$key."','1','".$filename."',now(),now(),'".$filename."','1','".$filename."')";					}					$query_prepared = $db->prepare($query);					$query_prepared->execute();				}			unset($_SESSION['Image_file']);			unset($_SESSION['Image_file_location']);			}			if(isset($_SESSION['Video_file'])){				foreach($_SESSION['Video_file'] as $key=>$video){					$filename = $video['cdnfilename'];					$location = $video['cdnfilepath'];					$thumbnail = $video['thumbnail'];					$cloud_orig_path = str_replace('/videos',"", $location);					$check_existing_record = "SELECT profile_id from videos where profile_id = $user_profile_id AND position = $key";					$check_existance = $db->prepare($check_existing_record);					$check_existance->execute();					$rowcount = $check_existance->rowCount();					if($rowcount > 0){						$query = "UPDATE videos 											SET												`path`='$location',												`uploaded_as_filename`='".$video['name'][0]."',												`filename`='$filename',												`video_original_path`='$cloud_orig_path',												`video_original_filename`='$filename',												`video_original_file_basename`='$filename',												`thumbnail_original_photo_path`='$location',												`thumbnail_photo_path`='$location',												`thumbnail_photo_filename`='$thumbnail',												`thumbnail_at_time`=3,												`published`=1											WHERE 												`profile_id`=$user_profile_id AND												`position`=$key";					}					else{						$query = "INSERT INTO `videos` (								`profile_id`,								`path`,								`uploaded_as_filename`,								`filename`,								`video_original_path`,								`video_original_filename`,								`video_original_file_basename`,								`thumbnail_original_photo_path`,								`thumbnail_photo_path`,								`thumbnail_photo_filename`,								`thumbnail_at_time`,								`published`,								`position`) 							VALUES (								'".$user_profile_id."',								'".$location."',								'".$video['name'][0]."',								'".$filename."',								'".$cloud_orig_path."',								'".$filename."',								'".$filename."',								'".$location."',								'".$location."',								'".$thumbnail."',								'3',								'1',								'".$key."')";					}					$query_prepared = $db->prepare($query);					$query_prepared->execute();				}			unset($_SESSION['Video_file']);			unset($_SESSION['Video_file_location']);				}			*/			echoResponse(200,array('status'=>true,'msg'=>'Updated Sucessfully'));	}});/******************************************Purpose: Send to email idParameter : form fieldType : POST******************************************//* // disabled this as it is handled in another section$app->post('/fileuploadparser', function () use ($app) {	$fileName = $_FILES["Image_file"]["name"][0]; // The file name	$fileTmpLoc = $_FILES["Image_file"]["tmp_name"][0]; // File in the PHP tmp folder	$fileType = $_FILES["Image_file"]["type"]; // The type of file it is	$fileSize = $_FILES["Image_file"]["size"]; // File size in bytes	$fileErrorMsg = $_FILES["Image_file"]["error"]; // 0 for false... and 1 for true	// $file_name = $_FILES['Image_file']['name'][$key];	$file_name = $_FILES['Image_file']['name'];	$location = $_SERVER['DOCUMENT_ROOT'].'/images/uploads/';// var_dump($_FILES);	if (!$fileTmpLoc) { // if file not chosen			    echo "ERROR: Please browse for a file before clicking the upload button.";	    exit();	}	if(move_uploaded_file($fileTmpLoc, $location.$fileName)){	    echo json_encode(['status_message'=>'file upload success', 'filename'=>$fileName]);	} else {	    echo "move_uploaded_file function failed";	}});*//******************************************Purpose: Send to email idParameter : form fieldType : POST******************************************/$app->post('/welcome_email', function () use ($app) {  $to_email = $app->request->post('email');  $first_name = $app->request->post('first_name');  $from = 'cat@castit.dk';  $subject  = "Tak for din ansøgning!  /  Thank you for your application!";  $headers = "MIME-Version: 1.0" . "\r\n";  $headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";  $headers .= 'From: Castit <cat@castit.dk>' . "\r\n";  $headers .= 'Reply-To: <'.$from.'>' . "\r\n";  $headers .= 'Return-Path: <cat@castit.dk>' ."\r\n";  $headers .= "Organization: CASTIT"."\r\n";  $headers .= "X-Priority: 3\r\n";  $headers .= "X-Mailer: PHP". phpversion() ."\r\n" ;	// $headers .= 'BCC: padmanabhann@mailinator.com, vs@anewnative.com, cat@castit.dk' . "\r\n";  $headers .= 'BCC: padmanabhann@mailinator.com, vs@anewnative.com' . "\r\n";  $html_body = <<< EOM<p>Kære $first_name,</p><p>Tusind tak for din ansøgning. Så snart vi har kigget den igennem, modtager du en mail med information om vi lægger din profil Online eller Offline.</p><p>Vi bestræber os på at svare inden 14 dage.</p><p>De bedste hilsner</p><p>Cathrine & Pernille</p><br/><p><img style="width:150px; height:30px" src="https://castit.dk/images/logo-b.svg"/></p><p>Rosenvængets Allè 11, 1. Sal</p><p>2100 København Ø</p><p>Cathrine Hovmand</p><p># 0045 2128 5825</p><p>E: cat@castit.dk</p><p>Pernille Marco: </p><p># 0045 3135 3579</p><p>E: pernille@castit.dk</p><a href="https://castit.dk">Castit.dk</a><br/>------------------------------------------------------------------<br/><p>Dear $first_name,</p><p>Thank you for your application. As soon as we have looked it through, you will receive an email with information about whether we will add your profile Online or Offline.  We strive to respond within 14 days.</p><p>Very best</p><p>Cathrine & Pernille</p><br/><p><img style="width:150px; height:30px" src="https://castit.dk/images/logo-b.svg"/></p><p>Rosenvængets Allè 11, 1. Sal</p><p>2100 København Ø</p><p>Cathrine Hovmand</p><p># 0045 2128 5825</p><p>E: cat@castit.dk</p><p>Pernille Marco: </p><p># 0045 3135 3579</p><p>E: pernille@castit.dk</p><a href="https://castit.dk">Castit.dk</a>EOM;global $mgClient;global $domain;$result = $mgClient->sendMessage($domain, array(	'from'    => 'CASTIT <info@castit.dk>',	'to'      => $to_email,	// 'to'      => 'padmanabhan.code@gmail.com',	'subject' => $subject,	'html'    => $html_body,	'bcc'	=> 'padmanabhann@mailinator.com, vs@anewnative.com, cat@castit.dk',));// mail( $to_email, $subject, $html_body, $headers ); // Accountant  $response['success'] = true;  $response['message'] = 'Email er sendt!';  $response['email'] = $to_email;  echoResponse(200, $response);  });$app->post('/sendemail', function () use ($app) {   global $db;  $data = json_decode($app->request->getBody(), true);  $response = array();  $to_email = $data['to_email'];  $from_email = $data['from_email'];  $mail_body ='';$to_cc ='';  if(isset($data['mail_body'])){    $mail_body = $data['mail_body'];  }  if(isset($data['to_cc'])){    $to_cc = $data['to_cc'];  }  $html = '<table style="text-align:left" cellspacing="0" cellpadding="0" width="556" border="0">    <tbody>    <tr>    <td>    <table style="width:100%" border="0">    <tbody>    <tr>    <td align="left"><img alt="Mailtoplogo" src="https://castit.dk/assets/mailTopLogo.png" ></td>    <td style="width:270px;padding-top:18px" align="left" valign="top"><b style="color:#696969">Castit <span class="il">Lightbox</span>:</b><br>'.$mail_body.'</td>    </tr>    <tr>    <td colspan="2"></td>    </tr>    </tbody>    </table>    </td>    </tr>    <tr>';  $subject = "Castit Workshop enquiry";  $headers = "MIME-Version: 1.0" . "\r\n";  $headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";  $headers .= 'From: Castit <cat@castit.dk>' . "\r\n";  $headers .= 'Reply-To: <'.$from_email.'>' . "\r\n";  $headers .= 'Return-Path: <cat@castit.dk>' ."\r\n";  $headers .= "Organization: CASTIT"."\r\n";  $headers .= "X-Priority: 3\r\n";  $headers .= "X-Mailer: PHP". phpversion() ."\r\n" ;	// $headers .= 'BCC: padmanabhann@mailinator.com, vs@anewnative.com, cat@castit.dk' . "\r\n";  $headers .= 'BCC: padmanabhann@mailinator.com, vs@anewnative.com' . "\r\n";  if($to_cc){    $headers .= 'CC: <'.$to_cc.'>' ."\r\n";  }	// $headers .= 'BCC: cat@castit.dk' . "\r\n";	$headers .= 'BCC: padmanabhann@mailinator.com, vs@anewnative.com, cat@castit.dk' . "\r\n";  //$html .= 'testemail';  global $mgClient;  global $domain;  $result = $mgClient->sendMessage($domain, array(	'from'    => 'CASTIT <info@castit.dk>',	'to'      => $to_email,	// 'to'      => 'padmanabhan.code@gmail.com',	'subject' => $subject,	'html'    => $html,	'cc'	=> $to_cc,	'bcc'	=> 'padmanabhann@mailinator.com, vs@anewnative.com, cat@castit.dk',	));//   mail( $to_email, $subject, $html, $headers ); // Accountant  $response['success'] = true;  $response['message'] = 'Email er sendt!';  echoResponse(200, $response);});/******************************************Purpose: Send Lighbox profiles to email idParameter : form fieldType : POST******************************************/$app->post('/sendlightbox', function () use ($app) {     global $db;	$data = json_decode($app->request->getBody(), true);	$response = array();	$to_email = $data['to_email'];	$from_email = $data['form_email'];	$mail_body ='';	$to_cc ='';	$to_bcc='';	if(isset($data['mail_body'])){		$mail_body = $data['mail_body'];	}	if(isset($data['to_cc'])){		$to_cc = $data['to_cc'];	}	if(isset($_SESSION["lightbox_token"])){		$lightbox_token = $_SESSION["lightbox_token"];		$query_check_lb = $db->prepare("SELECT * FROM lightboxes where token = '".$lightbox_token."'"); 		$query_check_lb->execute();		$rows_lb = $query_check_lb->fetchAll(PDO::FETCH_ASSOC);		if(count($rows_lb)>0) {			$lbid = $rows_lb[0]['id'];							$query_lb_pprofiles = $db->prepare("SELECT * FROM lightboxes_profiles WHERE lightbox_id ='".$lbid."'"); 			$query_lb_pprofiles->execute();			$rows_lb_pprofiles = $query_lb_pprofiles->fetchAll(PDO::FETCH_ASSOC);			$rowcount = count($rows_lb_pprofiles);			if($rowcount > 0){				$html = '<table style="text-align:left" cellspacing="0" cellpadding="0" width="556" border="0">							<tbody>							<tr>							<td>							<table style="width:100%" border="0">							<tbody>							<tr>							<td align="left"><img alt="Mailtoplogo" src="https://castit.dk/assets/mailTopLogo.png" ></td>							<td style="width:270px;padding-top:18px" align="left" valign="top"><b style="color:#696969">Castit <span class="il">Lightbox</span>:</b><br>'.$mail_body.'</td>							</tr>							<tr>							<td colspan="2"><img alt="Mailtopborder" src="https://castit.dk/assets/mailTopBorder.jpg"></td>							</tr>							</tbody>							</table>							</td>							</tr>							<tr>';								foreach($rows_lb_pprofiles as $rowp) {											$query = $db->prepare("SELECT p.*, m.profile_group_id, m.profile_number, m.profile_number_first_name_last_name, m.version, m.current, g.name as gender_name, hc.name as hair_color_name, ec.name as eye_color_name FROM profiles p INNER JOIN memberships m ON m.profile_id = p.id INNER JOIN genders g ON g.id = p.gender_id INNER JOIN hair_colors hc ON hc.id = p.hair_color_id INNER JOIN eye_colors ec ON ec.id = p.eye_color_id  WHERE p.id='".$rowp['profile_id']."' AND (p.profile_status_id = '1' ) AND m.current ='1' LIMIT 1"); 						$query->execute();						$rows = $query->fetchAll(PDO::FETCH_ASSOC);						if(count($rows)>0) {							$row = $rows[0];								$birthdate = new DateTime($row['birthday']);								$today   = new DateTime('today');								$age = $birthdate->diff($today)->y;													// Profile Image								$profile_image ='';								$query_image = $db->prepare("SELECT *, DATE_FORMAT(created_at, '%Y') as create_year, DATE_FORMAT(created_at, '%m') as create_month, DATE_FORMAT(created_at, '%d') as create_date FROM photos WHERE profile_id = '".$row['id']."' and published ='1' and media_slet_status != '1' ORDER BY position ASC LIMIT 1"); 						$query_image->execute();						$image= '';						$rows_image = $query_image->fetchAll(PDO::FETCH_ASSOC);						if(count($rows_image) > 0){							if (strpos($rows_image[0]['path'], 'vhost') !== false) {								$profile_image = 'https://castit.dk/images/uploads/'.$rows_image[0]['image'];							}							else{								$path = $rows_image[0]['create_year']."/".$rows_image[0]['create_month']."/".$rows_image[0]['create_date']."/".$rows_image[0]['id']."/thumb_";								$profile_image = 'https://castit.dk/profile_images/'.$path.$rows_image[0]['image'];							}						}									$html .= '<td style="vertical-align:top">							<table style="width:100%">							<tbody>							<tr>';						$html .= '<td style="height:230px;width:139px" valign="top">							<a href="https://castit.dk/?l='.$lbid.'" target="_blank">							<img src="'.$profile_image.'" alt="'.$row['first_name'].'">							</a>							<span style="display:block;background-color:Black;width:131px;color:#ffffff;font-weight:bold;font-size:11px;margin-left:1px">							'.$row['first_name'].'&nbsp;'.$row['profile_number'].';							</span>							<span>							</span>							</td>';						}				}				$html .= ' </tr>					</tbody></table>					</td>					</tr>					</tbody></table>';			$subject = "Castit Lighbox";			$headers = "MIME-Version: 1.0" . "\r\n";			$headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";			$headers .= 'From: Castit <info@ldsstage.in>' . "\r\n";			//$headers .= 'Reply-To: <'.$from_email.'>' . "\r\n";			if($to_cc){				$headers .= 'CC: <'.$to_cc.'>' ."\r\n";			}			// $headers .= 'BCC: cat@castit.dk' . "\r\n";  		$headers .= 'BCC: padmanabhann@mailinator.com, vs@anewnative.com, cat@castit.dk' . "\r\n";			//$html .= 'testemail';			global $mgClient;			global $domain;			$result = $mgClient->sendMessage($domain, array(                'from'    => 'CASTIT <info@castit.dk>',                'to'      => $to_email,                // 'to'      => 'padmanabhan.code@gmail.com',                'subject' => $subject,								'html'    => $html,								'bcc' => 'cat@castit.dk'            ));			// mail( $to_email, $subject, $html, $headers ); // Accountant			$response['success'] = true;			$response['message'] = 'Lightbox er sendt!';			}			else{			$response['success'] = true;			$response['message'] = 'No Profiles in Lightbox';			}		}		else{			$response['success'] = true;			$response['message'] = 'No Profiles in Lightbox';		}	}	else{			$response['success'] = true;			$response['message'] = 'No Profiles in Lightbox';	}	echoResponse(200, $response);});$app->post('/sendgroup', function () use ($app) {     global $db;	$data = json_decode($app->request->getBody(), true);	$response = array();	$to_email = $data['to_email'];	$from_email = $data['form_email'];  $gid = $data['gpid'];  $username = $data['username'];	$mail_body ='';	$to_cc ='';	if(isset($data['mail_body'])){		$mail_body = $data['mail_body'];	}	if(isset($data['to_cc'])){		$to_cc = $data['to_cc'];  }			$query_lb_pprofiles = $db->prepare("SELECT * FROM profile_grouping WHERE group_id = '".$gid."'"); 			$query_lb_pprofiles->execute();			$rows_lb_pprofiles = $query_lb_pprofiles->fetchAll(PDO::FETCH_ASSOC);// profile_notes			$group_addedon_query = $db->prepare("SELECT * from grouping where group_id = '".$gid."'");			$group_addedon_query->execute();			$group_addedon_value = $group_addedon_query->fetchAll(PDO::FETCH_ASSOC);			$group_date = date("d.m.y", strtotime($group_addedon_value[0]['added_on']));			$rowcount = count($rows_lb_pprofiles);			if($rowcount > 0){				$html = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">        <html xmlns="http://www.w3.org/1999/xhtml">        <head>        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />        <title>Castit</title>        <link rel="stylesheet" type="text/css" href="https://castit.dk/assets/css/emailstyle.css" media="all">';        $html .= "        </head>";        $html .= '<body style="margin:0; padding:0; border:0; outline:0; font-size:100%; vertical-align:baseline; font-weight:normal; box-sizing:border-box;line-height:1;background:#fff; font-family:helveticaneueltstdbd; font-size:14px; overflow-x:hidden;">        <link itemprop="url" rel="stylesheet" type="text/css" href="https://castit.dk/assets/css/emailstyle.css" media="all">        <div id="popup-wrapper"  style="float:left; width:100%; padding:54px 0 0 0;" >           <div class="popup-container" style="margin: auto ; width: 730px ; padding: 0 15px ; max-width: 100%" >                 <div class="popup-row1" style="border-bottom: solid 1px #2d2e32 ; float: left ; width: 730px; padding: 0 0 20px 0; margin: 0px 0 10px -5px;" >					   <div class="popup-logo" style="float:left; width:182px;" ><a href="#"><img style="max-width: 150px; margin-bottom: 15px;"  src="https://castit.dk/images/new_logo_black.png" alt="" /></a>					 	<a href="https://castit.dk/#/index/da?group='.$gid.'&username='.$username.'&groupname='.$group_addedon_value[0]['group_name'].'" style="background-color: blue;border-radius: 20px;padding: 7px 17px;color: #FFF;text-decoration: none;font-family: helvetica;font-size: 13px;">Open Lightbox</a>  					   </div>                       <div class="popup-text" style="display:block; padding:0 0 0 182px;">                             <h4 style="padding:0;color:#000; font-size:16px; line-height:20px; font-weight:bold; font-family:Arial, Helvetica, sans-serif; margin:0 0 20px 0;" >Castit Lightbox: '.$group_addedon_value[0]['group_name'].'</h4>                            <p style="color:#dddddd; font-size:14px; line-height:20px; font-weight:normal; font-family:Arial, Helvetica, sans-serif; margin:0;">'.$mail_body.'.</p>                       </div>                  </div><!--popup-row1-->                  <div class="popup-row2" style="clear: both ; margin: 0 0;width: 730px;">';        				foreach($rows_lb_pprofiles as $rowp) {											$query = $db->prepare("SELECT p.*, m.profile_group_id, m.profile_number, m.profile_number_first_name_last_name, m.version, m.current, g.name as gender_name, hc.name as hair_color_name, ec.name as eye_color_name FROM profiles p INNER JOIN memberships m ON m.profile_id = p.id INNER JOIN genders g ON g.id = p.gender_id INNER JOIN hair_colors hc ON hc.id = p.hair_color_id INNER JOIN eye_colors ec ON ec.id = p.eye_color_id  WHERE p.id='".$rowp['profile_id']."' AND (p.profile_status_id = '1' ) AND m.current ='1' LIMIT 1"); 						$query->execute();						$rows = $query->fetchAll(PDO::FETCH_ASSOC);						if(count($rows)>0) {							$row = $rows[0];								$birthdate = new DateTime($row['birthday']);								$today   = new DateTime('today');								$age = $birthdate->diff($today)->y;													// Profile Image								$profile_image ='';								$query_image = $db->prepare("SELECT *, DATE_FORMAT(created_at, '%Y') as create_year, DATE_FORMAT(created_at, '%m') as create_month, DATE_FORMAT(created_at, '%d') as create_date FROM photos WHERE profile_id = '".$row['id']."' and published ='1' and media_slet_status != '1' ORDER BY position ASC LIMIT 1"); 						$query_image->execute();						$image= '';						$rows_image = $query_image->fetchAll(PDO::FETCH_ASSOC);						if(count($rows_image) > 0){							if (strpos($rows_image[0]['path'], 'vhost') !== false) {								$profile_image = 'https://castit.dk/images/uploads/'.$rows_image[0]['image'];							}							else{								$path = $rows_image[0]['create_year']."/".$rows_image[0]['create_month']."/".$rows_image[0]['create_date']."/".$rows_image[0]['id']."/thumb_";								$profile_image = 'https://castit.dk/profile_images/'.$path.$rows_image[0]['image'];							}						}                  $html .= '<div class="pop-col3" style="float:left; padding:0 0; margin:0 0 20px 0;border: 5px solid white; width: 170px !important;">              <div class="pop-col-inner" style=""float:left; width:100%; position:relative;>                <div class="pop-thumb" style="float:left; width:100%; position:relative; margin:0 0 10px 0; background-image: url('.$profile_image.'); height:217px;background-size: cover;background-repeat: no-repeat;background-position: top center;">                <h6 style="font-weight:normal; margin:0; margin-top:100% !important; padding:0;color:#fff; font-size:10px; line-height:20px; font-weight:normal; font-family:Arial, Helvetica, sans-serif; padding:13px 0 13px 0; background:rgba(0,0,0,0.75); position:absolute; left:0; bottom:0; width:100%; text-align:center;" >'.$row['first_name'].'.&nbsp;'.$row['profile_number'].'</h6>              </div>              <h5 style="margin:0; padding:0;color:#000; font-size:12px; line-height:16px; font-weight:bold; font-family:Arial, Helvetica, sans-serif; margin:0 0 0 0;" >Note: </h5>                  <p style="color:#d1d1d1; font-size:12px; line-height:16px; font-weight:normal; font-family:Arial, Helvetica, sans-serif; margin:0 0 0 0;">'.$rowp["profile_notes"].'</p>                </div>              </div>';						}				}				$html .= '</div><!--popup-row2-->                  <div class="popup-row3" style="float:left; width:100%; margin:60px 0 0 0 ;border-top:solid 1px #2d2e32; padding:30px 0;">             <span class="popup-icon1" style="float:left"><img style="max-width:100%;"  src="https://castit.dk/images/group_icon.png" alt="" /></span>             <h3 style="font-weight:bold; margin:0; padding:0; float:right; font-size:32px; color:#000;font-family: helvetica;" >'.$group_date.'</h3>        </div><!--popup-row3-->           </div></div></body></html>';      $subject = "Castit Lighbox : ".$group_addedon_value[0]['group_name'];                $headers = "MIME-Version: 1.0" . "\r\n";      $headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";      $headers .= 'From: Castit <cat@castit.dk>' . "\r\n";      $headers .= 'Reply-To: <'.$from_email.'>' . "\r\n";      $headers .= 'Return-Path: <cat@castit.dk>' ."\r\n";      $headers .= "Organization: CASTIT"."\r\n";      $headers .= "X-Priority: 3\r\n";      $headers .= "X-Mailer: PHP". phpversion() ."\r\n" ;  		// $headers .= 'BCC: padmanabhann@mailinator.com, vs@anewnative.com, cat@castit.dk' . "\r\n";  		$headers .= 'BCC: padmanabhann@mailinator.com' . "\r\n";            $email_body = $html;      // $email_body = 'akjsldjalskd';      // $to_email = 'padmanabhan.code@gmail.com';	  //$html .= 'testemail';	  global $mgClient;	  global $domain;		$result = $mgClient->sendMessage($domain, array(		'from'    => 'CASTIT <info@castit.dk>',		'to'      => $to_email,		// 'to'      => 'padmanabhan.code@gmail.com',		'subject' => $subject,		'html'    => $email_body,		'bcc'	=> 'padmanabhann@mailinator.com, vs@anewnative.com, cat@castit.dk',		));			// mail( $to_email, $subject, $email_body, $headers ); // Accountant			$response['success'] = true;			$response['message'] = 'Group er sendt!';			}			else{			$response['success'] = true;			$response['message'] = 'No Profiles in Group';			}			echoResponse(200, $response);});/*$app->post('/sendgroup', function () use ($app) {     global $db;	$data = json_decode($app->request->getBody(), true);	$response = array();	$to_email = $data['to_email'];	$from_email = $data['form_email'];	$mail_body ='';$to_cc ='';	if(isset($data['mail_body'])){		$mail_body = $data['mail_body'];	}	if(isset($data['to_cc'])){		$to_cc = $data['to_cc'];	}				$lbid = 14;							$query_lb_pprofiles = $db->prepare("SELECT * FROM profile_grouping WHERE group_id ='".$lbid."'"); 			$query_lb_pprofiles->execute();			$rows_lb_pprofiles = $query_lb_pprofiles->fetchAll(PDO::FETCH_ASSOC);			$rowcount = count($rows_lb_pprofiles);			alert($rowcount);			if($rowcount > 0){				$html = '<table style="text-align:left" cellspacing="0" cellpadding="0" width="556" border="0">							<tbody>							<tr>							<td>							<table style="width:100%" border="0">							<tbody>							<tr>							<td align="left"><img alt="Mailtoplogo" src="https://castit.dk/assets/mailTopLogo.png" ></td>							<td style="width:270px;padding-top:18px" align="left" valign="top"><b style="color:#696969">Castit <span class="il">Lightbox</span>:</b><br>'.$mail_body.'</td>							</tr>							<tr>							<td colspan="2"><img alt="Mailtopborder" src="https://castit.dk/assets/mailTopBorder.jpg"></td>							</tr>							</tbody>							</table>							</td>							</tr>							<tr>';								foreach($rows_lb_pprofiles as $rowp) {											$query = $db->prepare("SELECT p.*, m.profile_group_id, m.profile_number, m.profile_number_first_name_last_name, m.version, m.current, g.name as gender_name, hc.name as hair_color_name, ec.name as eye_color_name FROM profiles p INNER JOIN memberships m ON m.profile_id = p.id INNER JOIN genders g ON g.id = p.gender_id INNER JOIN hair_colors hc ON hc.id = p.hair_color_id INNER JOIN eye_colors ec ON ec.id = p.eye_color_id  WHERE p.id='".$rowp['profile_id']."' AND (p.profile_status_id = '1' ) AND m.current ='1' LIMIT 1"); 						$query->execute();						$rows = $query->fetchAll(PDO::FETCH_ASSOC);						if(count($rows)>0) {							$row = $rows[0];								$birthdate = new DateTime($row['birthday']);								$today   = new DateTime('today');								$age = $birthdate->diff($today)->y;													// Profile Image								$profile_image ='';								$query_image = $db->prepare("SELECT *, DATE_FORMAT(created_at, '%Y') as create_year, DATE_FORMAT(created_at, '%m') as create_month, DATE_FORMAT(created_at, '%d') as create_date FROM photos WHERE profile_id = '".$row['id']."' and published ='1' ORDER BY position ASC LIMIT 1"); 						$query_image->execute();						$image= '';						$rows_image = $query_image->fetchAll(PDO::FETCH_ASSOC);						if(count($rows_image) > 0){							if (strpos($rows_image[0]['path'], 'vhost') !== false) {								$profile_image = 'https://castit.dk/images/uploads/'.$rows_image[0]['image'];							}							else{								$path = $rows_image[0]['create_year']."/".$rows_image[0]['create_month']."/".$rows_image[0]['create_date']."/".$rows_image[0]['id']."/thumb_";								$profile_image = 'https://castit.dk/profile_images/'.$path.$rows_image[0]['image'];							}													}									$html .= '<td style="vertical-align:top">							<table style="width:100%">							<tbody>							<tr>';						$html .= '<td style="height:230px;width:139px" valign="top">							<a href="https://castit.dk/?l='.$lbid.'" target="_blank">							<img src="'.$profile_image.'" alt="'.$row['first_name'].'">							</a>							<span style="display:block;background-color:Black;width:131px;color:#ffffff;font-weight:bold;font-size:11px;margin-left:1px">							'.$row['first_name'].'&nbsp;'.$row['profile_number'].';							</span>							<span>							</span>							</td>';						}				}				$html .= ' </tr>					</tbody></table>					</td>					</tr>					</tbody></table>';			$subject = "Castit Lighbox";			$headers = "MIME-Version: 1.0" . "\r\n";			$headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";			$headers .= 'From: Castit <info@ldsstage.in>' . "\r\n";			//$headers .= 'Reply-To: <'.$from_email.'>' . "\r\n";			if($to_cc){				$headers .= 'CC: <'.$to_cc.'>' ."\r\n";			}			//$html .= 'testemail';			mail( $to_email, $subject, $html, $headers ); // Accountant			$response['success'] = true;			$response['message'] = 'Lightbox er sendt!';			}			else{			$response['success'] = true;			$response['message'] = 'No Profiles in Lightbox';			}		}		else{			$response['success'] = true;			$response['message'] = 'No Profiles in Lightbox';		}			echoResponse(200, $response);});*//******************************************Purpose: Get grouping list for dropdownParameter : Type : GET******************************************/$app->get('/getgroupinglist', function () use ($app) {     global $db;	$grouping = array();	$reponse =  array();	$grouptoken =  $app->request->get('grouptoken');	$query_grouping = $db->prepare("SELECT * FROM grouping WHERE token_id='".$grouptoken."' AND status ='1' order by group_name"); 	$query_grouping->execute();	$rows_grouping = $query_grouping->fetchAll(PDO::FETCH_ASSOC);	$rowcount = count($rows_grouping);    foreach($rows_grouping as $row) {		$grouping[] = array('id' => $row['group_id'],						  'name' => $row['group_name'],						);	}	$reponse =  array('count'=> $rowcount, 'grouping'=>$grouping);	echoResponse(200, $reponse);});/******************************************Purpose: Add new groupingParameter : Type : GET******************************************/$app->get('/addnewgrouping', function () use ($app) {     global $db;	$groupname =  $app->request->get('groupname');	$grouping = array();	$reponse = array();	$rowcount = 0;	$grouping_token = $app->request->get('grouptoken');		$query_check_gp = $db->prepare("SELECT * FROM `grouping` where `group_name` LIKE '%".$groupname."%' AND token_id ='".$grouping_token."'"); 	$query_check_gp->execute();	$rows_gp = $query_check_gp->fetchAll(PDO::FETCH_ASSOC);	if(count($rows_gp)>0) {		$gpid = $rows_gp[0]['group_id'];	}else{			$q_gruping = "INSERT INTO `grouping` ( `token_id`, `group_name`, `status`) VALUES ('".$grouping_token."', '".$groupname."','1')"; 			//echo $q; 			$gpid = $db->exec($q_gruping);	}		$query_grouping = $db->prepare("SELECT * FROM grouping WHERE status ='1' AND token_id ='".$grouping_token."' order by group_name"); 	$query_grouping->execute();	$rows_grouping = $query_grouping->fetchAll(PDO::FETCH_ASSOC);	$rowcount = count($rows_grouping);    foreach($rows_grouping as $row) {		$grouping[] = array('id' => $row['group_id'],						  'name' => $row['group_name'],						);	}	$reponse =  array('count'=> $rowcount, 'grouping'=>$grouping);	echoResponse(200, $reponse);  });// Landing Page data$app->get('/homepage',function () use ($app) {     global $db;	$query = $db->prepare("SELECT p.*,  FROM profiles p WHERE 1=1 AND ( p.profile_status_id = 1' OR p.profile_status_id ='' 2' ) LIMIT 10"); 	$query->execute();    $rows = $query->fetchAll(PDO::FETCH_ASSOC);//	print_r($rows[0]);exit;	if(count($rows)>0) {				foreach($rows as $row)			$response = array('success' => true, 'datahome' => $rows[0] );	}	else {		$response['success'] = false;		$response['message'] = 'Unbale to load profiles';	}		echoResponse(200, $response);});/******************************************Purpose: Registration step 2 store data @sessionParameter : form fieldType : POST******************************************/$app->post('/customercreatestep', function () use ($app) {     global $db;	$data = json_decode($app->request->getBody(), true);	if($_SESSION['customer'] = $data){						$_SESSION['step2'] = 1;			/* SpringEdge - SMS Integration			   OTP send to user mobile				*/			$ch = curl_init();			curl_setopt($ch, CURLOPT_URL,"https://instantalerts.co/api/web/send");			curl_setopt($ch, CURLOPT_POST, 1);						$otp = rand(1000,9999);			$mobile = $data['phone_1'];						$message = 'Your One Time Password is '.$otp;			//$postval = array('method' => 'sms', 'api_key' => 'A17b14ff38f28bcda16b304cd3c924f66', 'sender' => 'SPEDGE', 'to' => $mobile, 'message' => $message, 'format' => 'json');			$postval = array('method' => 'sms', 'apikey' => '69iq54a4m4s4ib0agg135o3y0yfbkbmbu', 'sender' => 'SEDEMO', 'to' => $mobile, 'message' => $message, 'format' => 'json');						curl_setopt($ch, CURLOPT_POSTFIELDS, 			http_build_query($postval));						curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);			$server_output = curl_exec ($ch);			curl_close ($ch);						$_SESSION['otp'] = $otp;			$_SESSION['mobile'] = $mobile;						//print_r($server_output);						$response = array('sucess' => true, 'message' => 'Session stored');	}else{			//$_SESSION['step2'] = 0;			$response = array('sucess' => false, 'message' => 'There is some problem to store data. Please try again');	}		echoResponse(200, $response);});/******************************************Purpose: Home pageParameter : NILType : POST******************************************/$app->post('/aboutus',function () use ($app) {     global $db;		$data =  json_decode($app->request->getBody(), true);		$response = array();	    $rows = $db->select("ad_user","password, usertype", array('username' => $username), "");		if(count($rows['data'])>0) {		if($rows['data'][0]['password'] == md5($password)) {			$response = array('success' => true, 'usertype' => $rows['data'][0]['usertype'] );		}		else {			$response = array('success' => false, 'message' => 'Username or password is incorrect');		}	}	else {		$response['success'] = false;		$response['message'] = 'Username or password is incorrect';	}		echoResponse(200, $response);});/******************************************Purpose: Login check Parameter : username and passwordType : POST******************************************/$app->post('/login',function () use ($app) {     global $db;		$data =  json_decode($app->request->getBody(), true);		$email = $data['email']; // Email / username	$password = $data['password']; // password	$response = array();    $rows = $db->select("users","user_id, fname, lname, email, password, status, payment_status", array('email' => $email), "");	//$response = array('success' => false, 'message' => count($rows['data']));	//echoResponse(200, $response);exit;		if(count($rows['data'])>0) {		if($rows['data'][0]['password'] == md5($password)) {			if($rows['data'][0]['status'] ==1){				$_SESSION['login_user'] = 1;				$_SESSION['login_userid'] = $rows['data'][0]['user_id'];				$_SESSION['login_userfullname'] = $rows['data'][0]['fname']." ".$rows['data'][0]['lname'];				$_SESSION['login_useremail'] = $rows['data'][0]['email'];				$response = array('success' => true, 'userstatus' => $rows['data'][0]['status'] , 'userid' => $rows['data'][0]['user_id'] );			}			else{				$response = array('success' => false, 'message' => 'You account is not activated yet');			}		}		else {			$response = array('success' => false, 'message' => 'Username or password is incorrect');		}	}	else {		$response['success'] = false;		$response['message'] = 'Username or password is incorrect';	}		echoResponse(200, $response);});/******************************************Purpose: Get Profile detailParameter : nullType : GET******************************************/$app->get('/myprofiledetails',function () use ($app) {     global $db;		$query = $db->prepare("SELECT u.*, s.name as state, c.name as countryname FROM users u, states s, countries c WHERE s.id= u.region and c.id=u.country and u.user_id='".$_SESSION['login_userid']."' "); 	$query->execute();    $rows = $query->fetchAll(PDO::FETCH_ASSOC);	//print_r($rows[0]);	$customer = array();	if(count($rows[0])>0){		$customer['owner_name'] = $rows[0]['fname']." ".$rows[0]['lname'];		$customer['owner_email'] = $rows[0]['email'];		$customer['owner_phone'] = $rows[0]['phone_1'];		$customer['owner_phone1'] = $rows[0]['phone_2'];		$address = $rows[0]['address_1'];		if($rows[0]['address_2']) {			$address .= "-".$rows[0]['address_2'];		}		$address .= "-".$rows[0]['city'];				$address .= "-".$rows[0]['city'].", ".$rows[0]['state'].", ".$rows[0]['post'];		$address .= "<br>".$rows[0]['countryname'];		$customer['owner_address'] = $address;			}	//print_r($customer);	//$customers = array('customer' => $rows[0]);	$query_pets = $db->prepare("SELECT p.*, s.type_name as species_name, bt.breed_name as breedname FROM pets p, species s, breed_type bt WHERE s.type_id = p.species_id AND bt.breed_id = p.breed_type AND p.owner_id='".$_SESSION['login_userid']."' "); 	$query_pets->execute();    $rows_pets = $query_pets->fetchAll(PDO::FETCH_ASSOC);	//print_r($rows_pets);	//$pet = $rows_pets[0];	$customers = array('customer' => $rows[0], 'custpets' => $rows_pets);		echoResponse(200, $customers);});/******************************************Purpose: Get User detailsParameter : Type : GET******************************************/$app->get('/account', function () use ($app) {     global $db;	$userid =  $app->request->get('userid');    $rows = $db->select("users","fname,lname,email", array('user_id' => $userid), '');	$account = $rows['data'][0];		echoResponse(200, $account);});/******************************************Purpose: Update User detailsParameter : Form FieldsType : POST******************************************/$app->post('/accountupdate', function () use ($app) {     global $db;	$data = json_decode($app->request->getBody(), true);		if($data['password']=='') {		$rows = $db->select("ad_user","password", array('usertype' => $data['usertype']), '');		$password = $rows['data'][0]['password'];	}	else {		$password = md5($data['password']);	}	    $q = "UPDATE `ad_user` SET `email`='".$data['email']."', `password`='".$password."'	WHERE `usertype`='".$data['usertype']."'";		$query = $db->prepare($q);	if($query->execute()) {		$response = array('sucess' => true, 'message' => 'Customer info updated Sucessfully!');	}	else {		$response = array('sucess' => false, 'message' => 'Customer info not updated. Please try again later');	}	echoResponse(200, $response);});/******************************************Purpose: Newsletter SubscriptionParameter : form fieldType : POST******************************************/$app->post('/newsletterSubscribe',function () use ($app) {     global $db;	$data = json_decode($app->request->getBody(), true);	$email = $data['email'];	$emailarr = explode('@',$email);	$domain = $emailarr[1];	$ip = getIP();	$confirmed_ip = getIP();	$created_at = strtotime("now");	$confirmed_at = strtotime("now");	$status =1;	//print_r($data);		$query = $db->prepare("SELECT * FROM wp_wysija_user WHERE email='".$email."'"); 	$query->execute();    $rows = $query->fetchAll(PDO::FETCH_ASSOC);	if((isset($rows)) && count($rows)<= 0){		$q_news = "INSERT INTO `wp_wysija_user` ( `email`, `ip`, `confirmed_ip`, `confirmed_at`, `created_at`, `status`, `domain`) VALUES ('".$email."', '".$ip."', '".$confirmed_ip."', '".$confirmed_at."', '".$created_at."', '".$status."', '".$domain."')";		$query_news = $db->exec($q_news);		if($query_news){			$subscribeid = $query_news;			$q_news1 = "INSERT INTO `wp_wysija_user_list` (`list_id`, `user_id`, `sub_date`, `unsub_date`)VALUES ('1', '".$subscribeid."', '".$confirmed_at."', '0')";			$query_news1 = $db->exec($q_news1);		}		$response = array('sucess' => true, 'message' => 'Thank you for your subscription !', 'type' => 'subscribe');	}	else{	$response = array('sucess' => false, 'message' => 'You have already subscribed with this email !', 'type' => 'subscribe');	}	echoResponse(200, $response);});/******************************************Purpose: Registration step 2 verify OTPParameter : otpType : POST******************************************/$app->post('/resetpassword',function () use ($app) {     global $db;	$data = json_decode($app->request->getBody(), true);	$email = $data['email'];	$query = $db->prepare("SELECT * FROM profiles WHERE email='".$email."' ORDER by id desc limit 1"); 	$query->execute();    $rows = $query->fetchAll(PDO::FETCH_ASSOC);	//print_r($rows);die;	if((isset($rows)) && count($rows)> 0){		if($rows[0]['profile_status_id'] ==1){			$alphabet = 'abdefghklmnpqrstuvwxyzABDEFGHKLMNPQRSTUVWXYZ23456789';			$pass = array(); //remember to declare $pass as an array			$alphaLength = strlen($alphabet) - 1; //put the length -1 in cache			for ($i = 0; $i < 8; $i++) {				$n = rand(0, $alphaLength);				$pass[] = $alphabet[$n];			}			$newpass = implode($pass);			$randompass = md5($newpass);			$q_pwd = "UPDATE `profiles` SET `password`='".$randompass."' WHERE `email`='".$email."'";			$query = $db->prepare($q_pwd);			$query->execute();				$content = '';				$content .= '<!DOCTYPE html><html lang="en"><head>								<meta content="text/html; charset=UTF-8" http-equiv="content-type">								</head>								<body style="background:#fff; font-family:Calibri;">								<div style="background:#fff;width:100%;float:left;">							  <div style="width:100%; margin:auto; text-align:center;">								<div style="display:inline-block; background:#fff; border:solid 3px #313743; 									width:580px;-webkit-border-radius: 8px;-moz-border-radius: 8px;border-radius: 8px; 									padding:0 0 13px; margin:18px 0 50px 0;">								<div style="color: #20be93;font-size: 23px;font-family: Calibri; 								background:#cccccc;float:left; width:100%; text-align:center; margin:0 0 16px 0; 								padding:8px 0 4px;"><img src="https://castit.dk/images/logo.png" 								width="90px"/> </div>								<div style="padding:0 30px;">';					$content_sal_dk = '<h5 style="color: #646e78;font-size: 16px;padding:0;margin: 0; text-align:left;">Kære '.ucfirst($rows[0]['first_name']).' '.ucfirst($rows[0]['last_name']).',</h5>';					$content_sal_en = '<h5 style="color: #646e78;font-size: 16px;padding:0;margin: 0; text-align:left;">Dear '.ucfirst($rows[0]['first_name']).' '.ucfirst($rows[0]['last_name']).',</h5>';					$reset_link_dk = '<a href="https://castit.dk/#/reset-password?email='.$email.'&resethash='.$randompass.'">Nulstil kodeord</a>';					$reset_link_en = '<a href="https://castit.dk/#/reset-password?email='.$email.'&resethash='.$randompass.'">Reset Password</a>';					// $content .= '<p style="color: #646e78;font-size: 16px;text-align:left;">Din nye adgangskode er,</p>';					$content_sign_dk = '<p style="color: #646e78;text-align:left;font-size: 16px;padding:0 0 45px 0; margin:51px 0 0; 								line-height:20px; text-align:left;font-family:Calibri"><br><br>Med venlig hilsen,<br>Castit</p>								<div style="float:left; width:100%; margin:40px 0 0 0; border-top:solid 1px #dddddd; 									padding:20px 0 0 0;">';					$content_sign_en = '<p style="color: #646e78;text-align:left;font-size: 16px;padding:0 0 45px 0; margin:51px 0 0; 								line-height:20px; text-align:left;font-family:Calibri"><br><br>Yours sincerely,<br>Castit</p>								<div style="float:left; width:100%; margin:40px 0 0 0; border-top:solid 1px #dddddd; 									padding:20px 0 0 0;">';					$content .= $content_sal_dk.'<p style="color: #646e78;font-size: 16px;padding:0; line-height:18px; text-align:left; 					">Klik på linket og skift din adgangskode.<br/></p><p style="color: #646e78;font-size: 16px;padding:0; line-height:18px; text-align:left; 								">'.$reset_link_dk.'</p>'.$content_sign_dk.'<br>								'.$content_sal_en.'<p style="color: #646e78;font-size: 16px;padding:0; line-height:18px; text-align:left;" >								Click on the link and change your password '.$reset_link_en.'								</p>'.$content_sign_en;										$content.= '</div></div></div></div></div></body></html>';					//echo 	$content;					$to = $email;				$subject = "Castit adgangskode";								// $headers = "MIME-Version: 1.0" . "\r\n";				// $headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";				// $headers .= 'From: Castit Admin<noreply@castit.com>' . "\r\n";				$headers = "MIME-Version: 1.0" . "\r\n";				$headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";				$headers .= 'From: Castit <cat@castit.dk>' . "\r\n";				$headers .= 'Reply-To: <cat@castit.dk>' . "\r\n";				$headers .= 'Return-Path: <cat@castit.dk>' ."\r\n";				$headers .= "Organization: CASTIT"."\r\n";				$headers .= "X-Priority: 3\r\n";				$headers .= "X-Mailer: PHP". phpversion() ."\r\n" ;					// $headers .= 'BCC: padmanabhann@mailinator.com, vs@anewnative.com, cat@castit.dk' . "\r\n";				$headers .= 'BCC: padmanabhann@mailinator.com, vs@anewnative.com, cat@castit.dk' . "\r\n";				global $mgClient;				global $domain;				$result = $mgClient->sendMessage($domain, array(					'from'    => 'CASTIT <info@castit.dk>',					'to'      => $to,					// 'to'      => 'padmanabhan.code@gmail.com',					'subject' => $subject,					'html'    => $content,					'bcc'	=> 'padmanabhann@mailinator.com, vs@anewnative.com, cat@castit.dk',				));				// mail( $to, $subject, $content, $headers ); // Accountant						$response = array( 'success' => true, 'message' => 'Din nye adgangskode er blevet sendt til din email.', 'message_en' => 'Your new password has been send to you email.');		}		else{			$response = array( 'success' => false, 'message' => 'Din konto er i inaktiv status. Kontakt venligst administrator');		}	}	else{		$customer ='';			$response = array( 'success' => false, 'message' => 'Der er ingen data for denne email i vores database. Bekræft venligst den angivne e-mail.');		}	echoResponse(200, $response);});/******************************************Purpose: Create and get Group TokenParameter : nullType : GET******************************************/$app->get('/getgrouptoken',function () use ($app) {   global $db;	$group_token = generate_uuid();	$response = array( 'success' => true, 'grouptoken' => $group_token);	echoResponse(200, $response);});$app->get('/getmediadata', function () use ($app) {	global $db;	$profile_id = isset($_REQUEST['profile_id']) ? $_REQUEST['profile_id'] : '';	$image_sql = "select * from photos where profile_id='".$profile_id."'";	$image_query = $db->prepare($image_sql);	$image_query->execute();	$images = $image_query->fetchAll(PDO::FETCH_ASSOC);	$video_sql = "select * from videos where profile_id='".$profile_id."'";	$video_query = $db->prepare($video_sql);	$video_query->execute();	$videos = $video_query->fetchAll(PDO::FETCH_ASSOC);	echo json_encode(['images'=>$images, 'videos'=>$videos]);});$app->post('/clearsessions', function () use ($app) {	unset($_SESSION['step1']);	unset($_SESSION['step2']);	unset($_SESSION['step3']);	unset($_SESSION['step4']);	unset($_SESSION['step5']);});$app->post('/mediafiledelete', function () use ($app) {	global $db;	$type = isset($_REQUEST['type']) ? $_REQUEST['type'] : '';	$profile_id = isset($_REQUEST['profile_id']) ? $_REQUEST['profile_id'] : '';	$position = isset($_REQUEST['position']) ? $_REQUEST['position'] : '';	if($type != '' && $profile_id != '' && $position != ''){		switch($type){			case 'image':				$sql = "delete from photos where profile_id = '".$profile_id."' AND position = '".$position."'";				$query = $db->prepare($sql);				$query->execute();				break;				case 'video':				$sql = "delete from videos where profile_id = '".$profile_id."' AND position = '".$position."'";				$query = $db->prepare($sql);				$query->execute();				break;			default:				break;		}		echo json_encode(['status_message'=>'deleted', 'position'=>$position, 'type'=>$type]);	}	else{		echo json_encode(['status_message'=>'insufficient data']);	}});$app->post('/fileuploadparser', function () use ($app) {	global $db;	$profile_id = isset($_REQUEST['profile_id']) ? $_REQUEST['profile_id'] : '';	$position = isset($_REQUEST['position']) ? $_REQUEST['position'] : '1';  $cdnfilepath	=	'';  $time 				=	time();  	if(!isset($_REQUEST["uploaded_file_type"])){		$fileName			= $_FILES["Image_file"]["name"];		$ext 					= ".".pathinfo($fileName, PATHINFO_EXTENSION);		$fileName			= unique_code(10).time().$ext;				$_FILES["Image_file"]["name"] = $fileName;	  $fileTmpLoc   = $_FILES["Image_file"]["tmp_name"];	  $fileType     = $_FILES["Image_file"]["type"];	  $fileSize     = $_FILES["Image_file"]["size"];	  $fileErrorMsg = $_FILES["Image_file"]["error"];	  $location     = $_SERVER['DOCUMENT_ROOT'].'/images/uploads/';	  if (!$fileTmpLoc) { // if file not chosen	      echo "ERROR: Please browse for a file before clicking the upload button.";	      exit();	  }	  if(move_uploaded_file($fileTmpLoc, $location.$fileName)){						$query = "INSERT INTO `photos` (`path`,`original_path`,`profile_id`,`filename`,`published`,`position`,`phototype_id`,`image`,`created_at`,`updated_at`,`image_tmp`,`image_processing`,`image_token`) VALUES ('".$location."','".$location."','".$profile_id."','".$fileName."','0','".$position."','1','".$fileName."',now(),now(),'".$fileName."','1','".$fileName."')";			$db->exec($query);			echo json_encode(['status_message'=>'file upload success', 'filename'=>$fileName, 'imgpath'=>'/images/uploads/'.$fileName, 'position'=>$position, 'type'=>'image']);			$recently_updated = "update profiles set recently_updated = 'true' where id = '".$profile_id."'";					$query_prepared = $db->prepare($recently_updated);					$query_prepared->execute();	    // echo json_encode(['status_message'=>'file upload success', 'type'=>'image', 'filename'=>"/images/uploads/".$fileName]);	  } 	  else {	    echo "move_uploaded_file function failed";	  }	}	    if(isset($_REQUEST["uploaded_file_type"]) && $_REQUEST["uploaded_file_type"] == "video"){	  unset($_SESSION["Video_file"]);	  $fileTmpLoc   = $_FILES["Video_file"]["tmp_name"];    $client = new Rackspace(Rackspace::UK_IDENTITY_ENDPOINT, array(      'username' => 'castit',      'apiKey'   => '187a515209d0affd473fedaedd6d770b'    ));    $location 					= $_SERVER['DOCUMENT_ROOT'].'/images/uploads/';    $objectStoreService = $client->objectStoreService(null, 'LON');    $container          = $objectStoreService->getContainer('video_original_files');    $date_dir           = date("o-m-d");	$fileName			= $_FILES["Video_file"]["name"];	$ext 				= ".".pathinfo($fileName, PATHINFO_EXTENSION);	$fileName			= unique_code(10).$ext;  $localFileName      = $location.$fileName;	$remoteFileName     = "/profiles/".$date_dir."/".$time."__".$fileName;	// $remoteFileName     = urlencode($remoteFileName);	$cdnfilepath     	= "/videos/profiles/".$date_dir;	$cdnfilename 		= $time."__".$fileName;	$thumbnail 			= "thumb_".$cdnfilename.".png";	$_FILES["Video_file"]["cdnfilepath"] = $cdnfilepath;	$_FILES["Video_file"]["cdnfilename"] = $cdnfilename;	$_FILES["Video_file"]["thumbnail"] = $thumbnail;  	$_SESSION["Video_file"][]	= $_FILES["Video_file"];		move_uploaded_file($fileTmpLoc, $location.$fileName);        $handle = fopen($location.$fileName, 'r');    $container->uploadObject($remoteFileName, $handle);    unset($handle);    $zencoder_input   	= "cf+uk://castit:187a515209d0affd473fedaedd6d770b@video_original_files".$remoteFileName;    $zencoder_output  	= "cf+uk://castit:187a515209d0affd473fedaedd6d770b@videos_public/videos".$remoteFileName;    $zencoder_base_url  = "cf+uk://castit:187a515209d0affd473fedaedd6d770b@videos_public".$cdnfilepath;    $zencoder_array = [      "input_file"		=> $zencoder_input,      "output_file"		=> $zencoder_output,      "base_url"		=> $zencoder_base_url,      "filename"		=> $cdnfilename,    ];    // $zencoder_json = json_encode($zencoder_array);    $zencoder_json = build_json_zencoder($zencoder_array);    $url = 'https://app.zencoder.com/api/v2/jobs';    $ch = curl_init( $url );    curl_setopt( $ch, CURLOPT_POST, 1);    curl_setopt( $ch, CURLOPT_POSTFIELDS, $zencoder_json);    curl_setopt( $ch, CURLOPT_RETURNTRANSFER , 1);    curl_setopt( $ch, CURLOPT_HTTPHEADER, array(      'Content-Type: application/json ',      'Zencoder-Api-Key: 9477541a57e1eb2471b1ff256ca4b92c'    ));		$response = curl_exec( $ch );				$filename = $cdnfilename;		$location = $cdnfilepath;		$thumbnail = $thumbnail;					$cloud_orig_path = str_replace('/videos',"", $location);						$query = "INSERT INTO `videos` (							`profile_id`,							`path`,							`uploaded_as_filename`,							`filename`,							`video_original_path`,							`video_original_filename`,							`video_original_file_basename`,							`thumbnail_original_photo_path`,							`thumbnail_photo_path`,							`thumbnail_photo_filename`,							`thumbnail_at_time`,							`published`,							`position`) 						VALUES (							'".$profile_id."',							'".$location."',							'".$fileName."',							'".$filename."',							'".$cloud_orig_path."',							'".$filename."',							'".$filename."',							'".$location."',							'".$location."',							'".$thumbnail."',							'3',							'0',							'".$position."')";					$query_prepared = $db->prepare($query);					$query_prepared->execute();					$recently_updated = "update profiles set recently_updated = 'true' where id = '".$profile_id."'";					$query_prepared = $db->prepare($recently_updated);					$query_prepared->execute();					// $db->exec($recently_updated);    echo json_encode(['status_message'=>'file upload success', 'type'=>'video', 'filename'=>$fileName, 'cdnfilepath'=>$cdnfilepath, 't'=>$time, 'thumbnail'=>$thumbnail, 'zencoder_input'=>$zencoder_input,'zencoder_output'=>$zencoder_output, 'position'=>$position ]);  }});function build_json_zencoder($data_array){	$json = '{	"input": "'.$data_array["input_file"].'",	"outputs": [{		"thumbnails": [				{					"base_url": "'.$data_array["base_url"].'",					"label": "regular",					"number": 1,					"filename": "thumb_'.$data_array["filename"].'",					"public": "true"				}			]		},    {"label": "mp4 high"},    {"url": "'.$data_array["output_file"].'"},    {"h264_profile": "high"}	]	}';	return $json;}//JSON coneverionfunction echoResponse($status_code, $response) {    global $app;    $app->status($status_code);    $app->contentType('application/json');    echo json_encode($response);}function getIP() {        $ip = '';        // cloudFlare IP check        if (isset($_SERVER['HTTP_CF_CONNECTING_IP'])) {            $ip = strip_tags($_SERVER['HTTP_CF_CONNECTING_IP']);        } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR']) AND strlen($_SERVER['HTTP_X_FORWARDED_FOR']) > 6) {            $ip = strip_tags($_SERVER['HTTP_X_FORWARDED_FOR']);        } elseif (!empty($_SERVER['HTTP_CLIENT_IP']) AND strlen($_SERVER['HTTP_CLIENT_IP']) > 6) {            $ip = strip_tags($_SERVER['HTTP_CLIENT_IP']);        } elseif (!empty($_SERVER['REMOTE_ADDR']) AND strlen($_SERVER['REMOTE_ADDR']) > 6) {            $ip = strip_tags($_SERVER['REMOTE_ADDR']);        }//endif        if (empty($ip))            $ip = '127.0.0.1';        return strip_tags($ip);    }	//Related functionsfunction generate_uuid() {    return sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),        mt_rand( 0, 0xffff ),        mt_rand( 0, 0x0fff ) | 0x4000,        mt_rand( 0, 0x3fff ) | 0x8000,        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )    );}			$app->run();function pp($q){  echo '<pre>';  print_r($q);  echo '</pre>';}function ppe($q){  pp($q);exit;}function unique_code($limit){  return substr(base_convert(sha1(uniqid(mt_rand())), 16, 36), 0, $limit);}function array_sort($array, $on, $order=SORT_ASC){    $new_array = array();    $sortable_array = array();    if (count($array) > 0) {        foreach ($array as $k => $v) {            if (is_array($v)) {                foreach ($v as $k2 => $v2) {                    if ($k2 == $on) {                        $sortable_array[$k] = $v2;                    }                }            } else {                $sortable_array[$k] = $v;            }        }        switch ($order) {            case SORT_ASC:                asort($sortable_array);            break;            case SORT_DESC:                arsort($sortable_array);            break;        }        foreach ($sortable_array as $k => $v) {            $new_array[$k] = $array[$k];        }    }    return $new_array;}?>